import{_ as s,c as a,a as p,o as t}from"./app-DPGM4BTH.js";const e="/blog-vp-reco/cv/ImageProcessing/05_xxx/01_addsub1.png",l="/blog-vp-reco/cv/ImageProcessing/05_xxx/02_addsub2.png",c="/blog-vp-reco/cv/ImageProcessing/05_xxx/03_max1.png",i="/blog-vp-reco/cv/ImageProcessing/05_xxx/04_max2.png",o={};function u(r,n){return t(),a("div",null,[...n[0]||(n[0]=[p(`<h2 id="_1-运算类操作" tabindex="-1"><a class="header-anchor" href="#_1-运算类操作"><span>1. 运算类操作</span></a></h2><h3 id="_1-1-饱和运算" tabindex="-1"><a class="header-anchor" href="#_1-1-饱和运算"><span>1.1 饱和运算</span></a></h3><p>饱和运算的原理十分简单，比如我们正常 RGB 的像素范围在 [0, 255] 之间，但是有的时候，做了加法、减法等等，导致其越界了。怎么办呢？<strong>OpenCV 的处理方式</strong>：会直接将值截断在边界值，小于 0 的被置为 0，大于 255 的被置为 255。</p><p>所以 <mark>饱和运算（Saturated Operation）</mark> 在实现上就是通过最大值与最小值将运算限制在固定范围之内。我们先用 Python 的方法来做一个演示，通过 min 和 max 函数来截断：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">opencv_add1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    temp <span class="token operator">=</span> a <span class="token operator">+</span> b</span>
<span class="line">    <span class="token keyword">return</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">opencv1 <span class="token operator">=</span> opencv_add1<span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;opencv add 1: &quot;</span><span class="token punctuation">,</span> opencv1<span class="token punctuation">)</span>  <span class="token comment"># 255</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但需要注意的是，OpenCV 的底层是 Numpy 数组，所以如果真实的要去做操作，需要使用 <mark>np.clip()</mark> 函数进行截断，或者直接使用 where 条件判断也可以：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">opencv_add2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 1. 先将输入转换为更大的整数类型（比如 int32），防止中间计算溢出</span></span>
<span class="line">    img1_int32 <span class="token operator">=</span> a<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span></span>
<span class="line">    img2_int32 <span class="token operator">=</span> b<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 2. 使用 clip 函数手动饱和处理，裁剪到 [0, 255] 范围</span></span>
<span class="line">    result_int32 <span class="token operator">=</span> img1_int32 <span class="token operator">+</span> img2_int32</span>
<span class="line">    result_clipped <span class="token operator">=</span> np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>result_int32<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 3. 最后再转换回 uint8 返回</span></span>
<span class="line">    <span class="token keyword">return</span> result_clipped<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">opencv2 <span class="token operator">=</span> numpy_add<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  np<span class="token punctuation">.</span>uint8<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;opencv add 2: &quot;</span><span class="token punctuation">,</span> opencv2<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，np.uint8 在内存中占用 1 个字节（8 位），只能表示 0 到 255 这 256 个整数，在溢出后它的默认规撞上了 C 语言层面的整数溢出规则，也就是进行回绕的<strong>模运算</strong>：把 0 和 255 收尾相连，形成一个圆形环路。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">import</span> cv2</span>
<span class="line"></span>
<span class="line">x <span class="token operator">=</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">y <span class="token operator">=</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">opencv <span class="token operator">=</span> cv2<span class="token punctuation">.</span>add<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>  <span class="token comment"># 250 + 50 = 300 -&gt; 255</span></span>
<span class="line">numpy <span class="token operator">=</span> x <span class="token operator">+</span> y  <span class="token comment"># 250 + 50 = 300 -&gt; 44 (mod 256)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;opencv:\\n&quot;</span><span class="token punctuation">,</span> opencv<span class="token punctuation">)</span>  <span class="token comment"># 饱和运算</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;numpy:\\n&quot;</span><span class="token punctuation">,</span> numpy<span class="token punctuation">)</span>  <span class="token comment"># 模运算</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我的例子中就是 mod 256。这种 Numpy 的模运算，和 OpenCV 的饱和运算是两码事儿，不要混淆了。</p><h3 id="_1-2-图像加减法" tabindex="-1"><a class="header-anchor" href="#_1-2-图像加减法"><span>1.2 图像加减法</span></a></h3><p>图像的加减法分别使用 <mark>cv2.add()</mark>、<mark>cv2.subtract()</mark> 两个函数执行，如果读取的内容是图像，它们在内部会自动执行饱和运算。当然，从实现上来说，这两个函数不仅可以用于数组的逐元素运算，也可以对标量运算。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> cv2</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">show_img_by_plt</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> title<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span></span>
<span class="line">    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span></span>
<span class="line">    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>title<span class="token punctuation">)</span></span>
<span class="line">    plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">&#39;off&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;01_luna.png&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 读取图像</span></span>
<span class="line">img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2RGB<span class="token punctuation">)</span></span>
<span class="line">M <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">&quot;uint8&quot;</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255</span></span>
<span class="line"></span>
<span class="line">result1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>add<span class="token punctuation">(</span>img<span class="token punctuation">,</span> M<span class="token punctuation">)</span></span>
<span class="line">result2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>subtract<span class="token punctuation">(</span>img<span class="token punctuation">,</span> M<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">show_img_by_plt<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;Original Image&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">show_img_by_plt<span class="token punctuation">(</span>result1<span class="token punctuation">,</span> <span class="token string">&quot;Add 255&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">show_img_by_plt<span class="token punctuation">(</span>result2<span class="token punctuation">,</span> <span class="token string">&quot;Subtract 255&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+e+'" alt="1.1 图像加减法越界结果" tabindex="0" loading="lazy"><figcaption>1.1 图像加减法越界结果</figcaption></figure><figure><img src="'+l+`" alt="1.2 图像加减法正常结果" tabindex="0" loading="lazy"><figcaption>1.2 图像加减法正常结果</figcaption></figure><h3 id="_1-3-图像混合" tabindex="-1"><a class="header-anchor" href="#_1-3-图像混合"><span>1.3 图像混合</span></a></h3><p>图像混合也是图像相加的一种，只不过可以赋予不同图像不同的权重进行相加。没错，就是我们的老朋友 <mark>cv2.addWeighted()</mark> 函数，在《锐化与均衡化》中已经见过面了：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">dst <span class="token operator">=</span> cv2<span class="token punctuation">.</span>addWeighted<span class="token punctuation">(</span>src1<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> src2<span class="token punctuation">,</span> beta<span class="token punctuation">,</span> gamma<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mi>r</mi><mi>c</mi><mn>1</mn><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>α</mi><mo>+</mo><mi>s</mi><mi>r</mi><mi>c</mi><mn>2</mn><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>β</mi><mo>+</mo><mi>γ</mi></mrow><annotation encoding="application/x-tex">dst(x,y)=src1(x,y)\\cdot{\\alpha}+src2(x,y)\\cdot{\\beta}+\\gamma </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">src</span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">src</span><span class="mord">2</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span></span></p><p>那我们就再来一个老熟人 <mark>Sobel 算子</mark>，看一下 X 方向、Y 方向、XY 混合方向，边缘检测的结果分别是什么：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> cv2</span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">show_img_by_plt</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> title<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span></span>
<span class="line">    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">&quot;gray&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>title<span class="token punctuation">)</span></span>
<span class="line">    plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">&#39;off&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;01_luna.png&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 读取图像</span></span>
<span class="line">gradient_x <span class="token operator">=</span> cv2<span class="token punctuation">.</span>Sobel<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>CV_32F<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">gradient_y <span class="token operator">=</span> cv2<span class="token punctuation">.</span>Sobel<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>CV_32F<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">gradient_xy <span class="token operator">=</span> cv2<span class="token punctuation">.</span>magnitude<span class="token punctuation">(</span>gradient_x<span class="token punctuation">,</span> gradient_y<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">show_img_by_plt<span class="token punctuation">(</span>gradient_x<span class="token punctuation">,</span> <span class="token string">&quot;Gradient X Float32&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">show_img_by_plt<span class="token punctuation">(</span>gradient_y<span class="token punctuation">,</span> <span class="token string">&quot;Gradient Y Float32&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">show_img_by_plt<span class="token punctuation">(</span>gradient_xy<span class="token punctuation">,</span> <span class="token string">&quot;Gradient XY Float32&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">show_img_by_plt<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>convertScaleAbs<span class="token punctuation">(</span>gradient_x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Gradient X uint8&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">show_img_by_plt<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>convertScaleAbs<span class="token punctuation">(</span>gradient_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Gradient Y uint8&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">show_img_by_plt<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>convertScaleAbs<span class="token punctuation">(</span>gradient_xy<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Gradient XY uint8&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+c+'" alt="1.3 Sobel 算子 - 不同方向的梯度显示 浮点数" tabindex="0" loading="lazy"><figcaption>1.3 Sobel 算子 - 不同方向的梯度显示 浮点数</figcaption></figure><figure><img src="'+i+'" alt="1.4 Sobel 算子 - 不同方向的梯度显示 正整数" tabindex="0" loading="lazy"><figcaption>1.4 Sobel 算子 - 不同方向的梯度显示 正整数</figcaption></figure><h3 id="_1-4-按位运算" tabindex="-1"><a class="header-anchor" href="#_1-4-按位运算"><span>1.4 按位运算</span></a></h3><h2 id="_2-形态学操作" tabindex="-1"><a class="header-anchor" href="#_2-形态学操作"><span>2. 形态学操作</span></a></h2><p>形态学运算是一种基于形状的图像处理技术，它是通过结构元素与图像进行特定运算的方式来改变图像的形态和特征。结构元素是一种小型、预定义的形状，通常是矩形、圆形或者椭圆形，可以与图像中的像素进行匹配。</p><p>形态学运算包括膨胀、腐蚀、开运算、闭运算等。其中膨胀操作可以将图像中的物体变大，使它更加连通；腐蚀操作则可以将图像中的物体变小，使它更加细化；开运算可以去除噪声，平滑图像的边缘；闭运算可以填补图像中物体的孔洞。</p><p>形态学在图像处理中应用广泛，特别是在图像分割、边缘检测、文本识别、计算机视觉等领域中。</p><h3 id="_2-1-膨胀与腐蚀" tabindex="-1"><a class="header-anchor" href="#_2-1-膨胀与腐蚀"><span>2.1 膨胀与腐蚀</span></a></h3><h3 id="_2-2-开-闭运算" tabindex="-1"><a class="header-anchor" href="#_2-2-开-闭运算"><span>2.2 开/闭运算</span></a></h3><h3 id="_2-3-梯度运算" tabindex="-1"><a class="header-anchor" href="#_2-3-梯度运算"><span>2.3 梯度运算</span></a></h3><h3 id="_2-4-顶帽与低帽-黑帽" tabindex="-1"><a class="header-anchor" href="#_2-4-顶帽与低帽-黑帽"><span>2.4 顶帽与低帽（黑帽）</span></a></h3><h3 id="_2-5-结构元素" tabindex="-1"><a class="header-anchor" href="#_2-5-结构元素"><span>2.5 结构元素</span></a></h3>',33)])])}const k=s(o,[["render",u]]),d=JSON.parse('{"path":"/blogs/ComputerVision/ImageProcessing/OpenCV1/05_xingtaixueyuyunsuan.html","title":"05-形态学与运算","lang":"en-US","frontmatter":{"title":"05-形态学与运算","date":"2025/10/12","categories":["OpenCV"],"tags":["图像处理","形态学与运算"]},"headers":[{"level":2,"title":"1. 运算类操作","slug":"_1-运算类操作","link":"#_1-运算类操作","children":[{"level":3,"title":"1.1 饱和运算","slug":"_1-1-饱和运算","link":"#_1-1-饱和运算","children":[]},{"level":3,"title":"1.2 图像加减法","slug":"_1-2-图像加减法","link":"#_1-2-图像加减法","children":[]},{"level":3,"title":"1.3 图像混合","slug":"_1-3-图像混合","link":"#_1-3-图像混合","children":[]},{"level":3,"title":"1.4 按位运算","slug":"_1-4-按位运算","link":"#_1-4-按位运算","children":[]}]},{"level":2,"title":"2. 形态学操作","slug":"_2-形态学操作","link":"#_2-形态学操作","children":[{"level":3,"title":"2.1 膨胀与腐蚀","slug":"_2-1-膨胀与腐蚀","link":"#_2-1-膨胀与腐蚀","children":[]},{"level":3,"title":"2.2 开/闭运算","slug":"_2-2-开-闭运算","link":"#_2-2-开-闭运算","children":[]},{"level":3,"title":"2.3 梯度运算","slug":"_2-3-梯度运算","link":"#_2-3-梯度运算","children":[]},{"level":3,"title":"2.4 顶帽与低帽（黑帽）","slug":"_2-4-顶帽与低帽-黑帽","link":"#_2-4-顶帽与低帽-黑帽","children":[]},{"level":3,"title":"2.5 结构元素","slug":"_2-5-结构元素","link":"#_2-5-结构元素","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"blogs/ComputerVision/ImageProcessing/OpenCV1/05_形态学与运算.md"}');export{k as comp,d as data};
