import{_ as i,c as u,a as l,e as t,w as p,r as o,o as r,b as n,d as s}from"./app-CkYqgEgS.js";const k={};function d(m,a){const e=o("CodeGroupItem"),c=o("CodeGroup");return r(),u("div",null,[a[3]||(a[3]=l('<h4 id="难度-简单" tabindex="-1"><a class="header-anchor" href="#难度-简单"><span>难度：简单</span></a></h4><p>实现一个函数，计算矩阵与标量的乘法运算。该函数接收一个二维数组（矩阵）和一个标量值作为输入，返回乘法运算后的新矩阵。</p><ul><li><strong>输入描述</strong>：输入包含两行： <ol><li>第一行为一个二维数组（矩阵），数组中的元素可以是整数或浮点数</li><li>第二行为一个标量值，可以是整数或浮点数</li></ol></li><li><strong>输出描述</strong>：返回一个二维数组，表示矩阵与标量相乘的结果。结果矩阵的维度与输入矩阵相同，每个元素都是输入矩阵对应位置的元素与标量的乘积。</li></ul>',3)),t(c,null,{default:p(()=>[t(e,{title:"代码框架"},{default:p(()=>[...a[0]||(a[0]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"from"),s(" typing "),n("span",{class:"token keyword"},"import"),s(" List"),n("span",{class:"token punctuation"},","),s(" Union")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"scalar_multiply"),n("span",{class:"token punctuation"},"("),s("matrix"),n("span",{class:"token punctuation"},":"),s(" List"),n("span",{class:"token punctuation"},"["),s("List"),n("span",{class:"token punctuation"},"["),s("Union"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"float"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" scalar"),n("span",{class:"token punctuation"},":"),s(" Union"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"float"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(" List"),n("span",{class:"token punctuation"},"["),s("List"),n("span",{class:"token punctuation"},"["),s("Union"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"float"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"pass")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    matrix "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"eval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    scalar "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"float"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    result "),n("span",{class:"token operator"},"="),s(" scalar_multiply"),n("span",{class:"token punctuation"},"("),s("matrix"),n("span",{class:"token punctuation"},","),s(" scalar"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("result"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"if"),s(" __name__ "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},'"__main__"'),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1}),t(e,{title:"示例 1"},{default:p(()=>[...a[1]||(a[1]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 输入：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token number"},"2.0")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 输出：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2.0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4.0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"6.0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"8.0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1}),t(e,{title:"示例 2"},{default:p(()=>[...a[2]||(a[2]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 输入：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1.5"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2.5"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3.5"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4.5"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1.0")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 输出：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1.5"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"2.5"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"3.5"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"4.5"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1})]),_:1}),a[4]||(a[4]=l(`<hr><h4 id="解题思路-1-python-数组手搓" tabindex="-1"><a class="header-anchor" href="#解题思路-1-python-数组手搓"><span>解题思路 1：Python 数组手搓</span></a></h4><p>非常简单，逐元素相乘。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Union</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">scalar_multiply</span><span class="token punctuation">(</span>matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>Union<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> scalar<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>Union<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> item1 <span class="token keyword">in</span> matrix<span class="token punctuation">:</span></span>
<span class="line">        temp_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">for</span> item2 <span class="token keyword">in</span> item1<span class="token punctuation">:</span></span>
<span class="line">            temp <span class="token operator">=</span> item2 <span class="token operator">*</span> scalar</span>
<span class="line">            temp_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span></span>
<span class="line">        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> result</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解题思路-2-numpy-数组处理" tabindex="-1"><a class="header-anchor" href="#解题思路-2-numpy-数组处理"><span>解题思路 2：Numpy 数组处理</span></a></h4><p>Numpy 中的 <mark>标量 * 矩阵</mark> 最快的方式是用广播机制（内部实现），我们只需要用 * 号即可，还可以用函数形式，或者手写循环形式：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># k为标量，A为矩阵</span></span>
<span class="line">B <span class="token operator">=</span> k <span class="token operator">*</span> A</span>
<span class="line">B <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>A<span class="token punctuation">,</span> k<span class="token punctuation">)</span></span>
<span class="line">B <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>k <span class="token operator">*</span> a_ij <span class="token keyword">for</span> a_ij <span class="token keyword">in</span> row<span class="token punctuation">]</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> A<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Union</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">scalar_multiply</span><span class="token punctuation">(</span>matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>Union<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> scalar<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>Union<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">    A <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>scalar <span class="token operator">*</span> A<span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8))])}const v=i(k,[["render",d]]),y=JSON.parse('{"path":"/blogs/CodeExam/AI/LinearAlgebra/LA5.html","title":"LA5.标量的矩阵乘法","lang":"en-US","frontmatter":{"title":"LA5.标量的矩阵乘法","date":"2025/09/24","categories":["每日一题"],"tags":["AI题库","线性代数"]},"headers":[],"git":{"createdTime":1758875206000,"updatedTime":1758875206000,"contributors":[{"name":"jinkai","email":"1213860588@qq.com","commits":1}]},"filePathRelative":"blogs/CodeExam/AI/LinearAlgebra/LA5.md"}');export{v as comp,y as data};
