import{_ as l,c as i,a as o,b as t,d as a,e as s,r as p,o as r}from"./app-DCqdGVAs.js";const c="/blog-vp-reco/pytorch/01_base/01-01.png",d="/blog-vp-reco/pytorch/01_base/01-02.png",g="/blog-vp-reco/pytorch/01_base/01-03.png",u="/blog-vp-reco/pytorch/01_base/01-04.png",h="/blog-vp-reco/pytorch/01_base/01-05.png",m="/blog-vp-reco/pytorch/01_base/01-06.png",y="/blog-vp-reco/pytorch/01_base/01-07.png",v="/blog-vp-reco/pytorch/01_base/01-08.png",b="/blog-vp-reco/pytorch/01_base/01-09.png",k="/blog-vp-reco/pytorch/01_base/01-10.png",f="/blog-vp-reco/pytorch/01_base/01-11.png",_="/blog-vp-reco/pytorch/01_base/01-12.png",x="/blog-vp-reco/pytorch/01_base/01-13.png",U={},D={href:"https://blog.csdn.net/qq_44703886/article/details/112859392",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.nvidia.cn/geforce/drivers/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://tianzhipeng-git.github.io/2023/11/21/cuda-version.html",target:"_blank",rel:"noopener noreferrer"},A={href:"https://blog.csdn.net/YYDS_WV/article/details/137825313",target:"_blank",rel:"noopener noreferrer"},P={href:"https://developer.nvidia.com/cuda-toolkit-archive",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.anaconda.com",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/pytorch/vision#installation",target:"_blank",rel:"noopener noreferrer"},z={href:"https://pytorch.org/get-started/locally/",target:"_blank",rel:"noopener noreferrer"},G={href:"https://developer.nvidia.com/rdp/cudnn-archive",target:"_blank",rel:"noopener noreferrer"},V={href:"https://zhuanlan.zhihu.com/p/416712347",target:"_blank",rel:"noopener noreferrer"},I={href:"https://developer.nvidia.com/rdp/cudnn-archive",target:"_blank",rel:"noopener noreferrer"};function E(S,n){const e=p("ExternalLinkIcon");return r(),i("div",null,[n[13]||(n[13]=o('<p>PyTorch 和 Tensorflow 都是当下最流行的 AI 框架，我看了一些视频和博客的对比，我觉得选择 PyTorch 的原因可以概述为两点：</p><ol><li><p>Tensorflow 的是有一套完整的生产力体系的，很成熟，但是同样也相对来说比较大，比较复杂。对于机器学习入门者或者学校的科研人员而言，PyTorch 更简洁、更简单。</p></li><li><p>因为 Tensorflow1.x 版本的一些不太友好使用体验，导致 PyTorch 迅速的占据市场。也是因此，过往这些年的大量学术论文，都是基于 PyTorch 写的（有数据统计 2022 年 PyTorch 已经占据顶会 80%的论文）。说句不好听的，现在硕士生做研究，基本上都是站在前人的肩膀上，删删改改，因此硕士生选择 Pytorch 做框架为最优解。</p></li></ol><p>看过我《机器学习》博文的朋友，一定知道吴恩达教授的案例，全都是拿 Tensorflow 写的，对于 PyTorch 我也是从头开始，不过不要慌，它的很多内容和 Numpy 还是很相似的。</p><p>配置 PyTorch 的一般流程：</p><ol><li>检查显卡是否有 GPU，检查显卡的驱动是否为最新</li><li>检查是否安装了 CUDA Toolkit (nvidia)，按照适配版本下载或更新。</li><li>安装和配置 Python</li><li>安装 Pytorch</li></ol><h2 id="_1-gpu-和-显卡驱动" tabindex="-1"><a class="header-anchor" href="#_1-gpu-和-显卡驱动"><span>1. GPU 和 显卡驱动</span></a></h2><p>一般英伟达的显卡都是有 GPU 模块的，我们可以从 <strong>任务管理器 --&gt; 性能</strong> 这里去查看：</p><figure><img src="'+c+'" alt="1.1 查看电脑中是否有GPU" tabindex="0" loading="lazy"><figcaption>1.1 查看电脑中是否有GPU</figcaption></figure><p>我现在使用的笔记本是 17 年的买的，显卡为 GTX 1050Ti，已经非常的老旧，从图片中可以看到只有 4G 的显存，大模型肯定是跑不了的。</p><p>为什么要更新显卡的驱动？因为简单来说，显卡的驱动决定了 CUDA 版本的上限。我们看两个对比图：</p><p>::: tabs</p><p>@tab 显卡驱动更新前</p><figure><img src="'+d+'" alt="1.2 显卡驱动更新前" tabindex="0" loading="lazy"><figcaption>1.2 显卡驱动更新前</figcaption></figure><p>@tab 显卡驱动更新后</p><figure><img src="'+g+'" alt="1.3 显卡驱动更新后" tabindex="0" loading="lazy"><figcaption>1.3 显卡驱动更新后</figcaption></figure><p>:::</p><p>这里的 CUDA Version：11.6，或者 12.6，代表着当前显卡驱动下，CUDA 的最高适配版本。因为 CUDA 都是向下兼容的，所以可用版本自然越高越好。</p><p><strong>参考文献&amp;相关链接：</strong></p>',18)),t("ol",null,[t("li",null,[t("a",D,[n[0]||(n[0]=a("《英伟达显卡驱动更新教程》",-1)),s(e)])]),t("li",null,[t("a",C,[n[1]||(n[1]=a("《GeForce® 驱动程序下载地址》",-1)),s(e)])])]),n[14]||(n[14]=o('<p><mark>Bug 记录</mark>：根据这个更新教程，会安装一个叫做 GeForce Experience 的应用程序。我的电脑虽然重启了，但是并没有直接更新驱动。而是需要在这个程序里（如图所示）：</p><figure><img src="'+u+`" alt="1.4 显卡驱动更新补充" tabindex="0" loading="lazy"><figcaption>1.4 显卡驱动更新补充</figcaption></figure><p>下载一个叫做 <strong>NVIDIA Studio 驱动程序</strong> 的东西，它就是最新的适配的驱动，更新完之后也需要重启。重启后使用图 1.2 中的命令行代码：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">nvidia<span class="token operator">-</span>smi</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>即可验证是否更新成功。我这 1050Ti 的显卡都能更新到 CUDA Version：12.6，我觉得大家的显卡应该都没问题。</p><h2 id="_2-cuda-toolkit-nvidia" tabindex="-1"><a class="header-anchor" href="#_2-cuda-toolkit-nvidia"><span>2. CUDA Toolkit (nvidia)</span></a></h2><p>CUDA Toolkit (nvidia)： CUDA 完整的工具包，包括了 Nvidia 驱动程序、相关的开发工具包等。具体包括 CUDA 程序的编译器(NVCC)、IDE、调试器等，CUDA 程序所对应的各式库文件以及它们的头文件。</p><p>刚才图 1.2 和 1.3 中显示的 CUDA 版本，只表示最高的适配版本，并不代表我们已经下载了 CUDA 的工具包。我们可以在命令行工具中，输入：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">nvcc <span class="token operator">-</span><span class="token operator">-</span>version</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>来查看是否已经安装过 CUDA 工具包。如果安装过会显示版本信息，如果没安装过会报错。</p><p>那么如何选择 CUDA Toolkit 的版本呢？我相信看过一些论坛帖子的朋友，一定对 CUDA 的什么向后兼容、向前兼容这种说辞感到很混乱。我也是历经千辛万苦，才找到了一个讲明白的博客，已经放在了参考文献的链接里，我在这里简单的做一个说明：</p><div class="layout"><figure><img src="`+h+'" alt="1.5 CUDA向后兼容" width="360" tabindex="0" loading="lazy"><figcaption>1.5 CUDA向后兼容</figcaption></figure><figure><img src="'+m+'" alt="1.6 CUDA小版本兼容" width="360" tabindex="0" loading="lazy"><figcaption>1.6 CUDA小版本兼容</figcaption></figure></div><p><strong>向后兼容</strong>很好理解， driver 的版本即使不断升级, 也能够兼容以前的旧的 cuda 和应用。如图 1.5 所示。</p><p><strong>小版本兼容</strong>是从 CUDA11 版本开始提供的功能，即你下载的即使是 11.0，也可以兼容到最新的 11.8，只要在 11 这个大版本里面，都可以成功运行。如图 1.6 所示。</p><figure><img src="'+y+'" alt="1.7 CUDA向前兼容" width="560" tabindex="0" loading="lazy"><figcaption>1.7 CUDA向前兼容</figcaption></figure><p><strong>向前兼容</strong>其实就是小版本兼容的 PLUS 版，涉及到跨越大版本的兼容情况，看图 1.7，这个图中的 C 表示兼容，X 表示不兼容，要注意的是它只表示向前兼容的情况。</p><p>举个例子，横轴中的第一个 470.57（CUDA 11.4），它显示的虽然是 11-5 到 12-3 都是 C，11-0 到 11-3 都是 X，但是它其实从 11-0 开始到 12-3 是全部兼容的，因为 CUDA 对旧版本是绝对兼容的，这里的 C 只是表示向前兼容的情况。</p><p>所以通过这样一个兼容性关系，我们可以知道 CUDA Toolkit (nvidia) 的版本，直接下载最高适配版本就可以了，如果怕出错，可以选择降一个版本下载。</p><div class="layout"><figure><img src="'+v+'" alt="1.8 旧版本CUDA工具包" width="360" tabindex="0" loading="lazy"><figcaption>1.8 旧版本CUDA工具包</figcaption></figure><figure><img src="'+b+'" alt="1.9 新版本CUDA工具包" width="360" tabindex="0" loading="lazy"><figcaption>1.9 新版本CUDA工具包</figcaption></figure></div><p>从运行结果可以看到，我现在的电脑中已经安装过了 11.6 版本的工具包，我需要先删除卸载旧的，再安装新的，具体操作请看参考文献 2。如果没有安装过，首次安装的话，只需把卸载旧版本的那一步跳过就行。</p><p><strong>参考文献&amp;相关链接：</strong></p>',21)),t("ol",null,[t("li",null,[t("a",T,[n[2]||(n[2]=a("《cuda 模块关系和版本兼容性》",-1)),s(e)])]),t("li",null,[t("a",A,[n[3]||(n[3]=a("《windows cuda 更新/安装教程》",-1)),s(e)])]),t("li",null,[t("a",P,[n[4]||(n[4]=a("《CUDA Toolkit 下载地址》",-1)),s(e)])])]),n[15]||(n[15]=o(`<h2 id="_3-python-相关" tabindex="-1"><a class="header-anchor" href="#_3-python-相关"><span>3. Python 相关</span></a></h2><p>推荐新手使用 Anaconda，因为它不仅集成了 Jupyter Notebook，可以方便我们记笔记，以及非项目的代码运算；还能创建虚拟环境，方便不同 PyTorch 版本的项目运行，当然老手用 venv 等其它的虚拟环境创建工具也行。</p><p>Anaconda 安装最新的即可，安装选项，以及环境配置，不懂的可以百度搜索 “Anaconda 安装教程”，有很多博客帖子。</p><p>不用担心 Anaconda 中 python 版本和 PyTorch 不兼容的问题，因为一般都是使用虚拟环境，重新安装对应版本的 python 和 pytorch。对应关系如下图所示，更多旧版本信息，请看相关链接 2。</p><table><thead><tr><th style="text-align:center;">torch</th><th style="text-align:center;">torchvision</th><th style="text-align:center;">Python</th></tr></thead><tbody><tr><td style="text-align:center;">main / nightly</td><td style="text-align:center;">main / nightly</td><td style="text-align:center;">&gt;=3.9, &lt;=3.12</td></tr><tr><td style="text-align:center;">2.4</td><td style="text-align:center;">0.19</td><td style="text-align:center;">&gt;=3.8, &lt;=3.12</td></tr><tr><td style="text-align:center;">2.3</td><td style="text-align:center;">0.18</td><td style="text-align:center;">&gt;=3.8, &lt;=3.12</td></tr><tr><td style="text-align:center;">2.2</td><td style="text-align:center;">0.17</td><td style="text-align:center;">&gt;=3.8, &lt;=3.11</td></tr><tr><td style="text-align:center;">2.1</td><td style="text-align:center;">0.16</td><td style="text-align:center;">&gt;=3.8, &lt;=3.11</td></tr><tr><td style="text-align:center;">2.0</td><td style="text-align:center;">0.15</td><td style="text-align:center;">&gt;=3.8, &lt;=3.11</td></tr><tr><td style="text-align:center;">1.13</td><td style="text-align:center;">0.14</td><td style="text-align:center;">&gt;=3.7.2, &lt;=3.10</td></tr><tr><td style="text-align:center;">1.12</td><td style="text-align:center;">0.13</td><td style="text-align:center;">&gt;=3.7, &lt;=3.10</td></tr><tr><td style="text-align:center;">1.11</td><td style="text-align:center;">0.12</td><td style="text-align:center;">&gt;=3.7, &lt;=3.10</td></tr><tr><td style="text-align:center;">1.10</td><td style="text-align:center;">0.11</td><td style="text-align:center;">&gt;=3.6, &lt;=3.9</td></tr></tbody></table><p>Anaconda 中 conda 虚拟环境相关操作（folder_name 是指你命名的虚拟环境的名字，和文件夹名命名规则一样）：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">conda create <span class="token operator">-</span>n folder_name python<span class="token operator">==</span>x<span class="token punctuation">.</span>x     <span class="token comment"># 创建虚拟环境</span></span>
<span class="line">conda activate folder_name      <span class="token comment"># 激活虚拟环境</span></span>
<span class="line">conda deactivate        <span class="token comment"># 退出虚拟环境</span></span>
<span class="line"></span>
<span class="line">conda info <span class="token operator">-</span><span class="token operator">-</span>envs       <span class="token comment"># 查看conda环境下的所有虚拟环境</span></span>
<span class="line">conda <span class="token builtin">list</span>          <span class="token comment"># 在激活虚拟环境后，此命令可以查看已经安装的库</span></span>
<span class="line">conda remove <span class="token operator">-</span>n folder_name<span class="token operator">/</span><span class="token builtin">all</span>     <span class="token comment"># 删除指定/全部虚拟环境</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>参考文献&amp;相关链接：</strong></p>`,8)),t("ol",null,[t("li",null,[t("a",w,[n[5]||(n[5]=a("《Anaconda 下载地址》",-1)),s(e)])]),t("li",null,[t("a",N,[n[6]||(n[6]=a("《pytorch 的 github 官方文档》",-1)),s(e)])])]),n[16]||(n[16]=t("h2",{id:"_4-pytorch-安装",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_4-pytorch-安装"},[t("span",null,"4. PyTorch 安装")])],-1)),t("p",null,[n[8]||(n[8]=a("首先，打开 PyTorch 的官网安装地址：",-1)),t("a",z,[n[7]||(n[7]=a("https://pytorch.org/get-started/locally/",-1)),s(e)]),n[9]||(n[9]=a("。",-1))]),n[17]||(n[17]=o('<div class="layout"><figure><img src="'+k+'" alt="1.10 PyTorch下载1" width="360" tabindex="0" loading="lazy"><figcaption>1.10 PyTorch下载1</figcaption></figure><figure><img src="'+f+`" alt="1.11 PyTorch下载2" width="360" tabindex="0" loading="lazy"><figcaption>1.11 PyTorch下载2</figcaption></figure></div><p>从图 1.10 中，我们可以看到 PyTorch 现在的最新版本 2.4.1，CUDA 版本最低要求为 11.8。经过更新显卡驱动之后，CUDA 11.8、12.1、12.4 的适配需求，无疑都是满足的，根据自己的需求做选择。</p><p>根据我学长的建议，最好是多创建几个虚拟环境，配置一些老版本的 PyTorch，因为很多论文中用到的版本都不是很新。</p><p>如果我要安装 2.4.1 版本，图 1.10 中的选择就是我需要的，只用复制最下面的命令行指令即可。但是我已经安装了一个 2.0 版本，一个 1.31 版本，所以这次我打算安装一个 1.10 的老版本。</p><p>如图 1.11 中蓝色方框所示，因为我用的 conda 虚拟环境，所以就要用 conda 指令进行下载，如果没有使用 Anaconda，请用 pip 下载。类似图 1.11 的老版本下载命令，在图 1.10 中蓝色方框的链接里。</p><p>::: tabs</p><p>@tab 命令及说明</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># win 键 + R 键，输入cmd，回车，打开命令行工具</span></span>
<span class="line"><span class="token comment"># 创建一个叫做 pytorch_1.10 的虚拟环境，python版本为 3.7</span></span>
<span class="line">conda create <span class="token operator">-</span>n pytorch_1<span class="token punctuation">.</span><span class="token number">10</span> python<span class="token operator">==</span><span class="token number">3.7</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看已经创建的所有虚拟环境</span></span>
<span class="line">conda info <span class="token operator">-</span><span class="token operator">-</span>envs</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 激活 pytorch_1.10 环境</span></span>
<span class="line">conda activate pytorch_1<span class="token punctuation">.</span><span class="token number">10</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 粘贴从 PyTorch 官网复制下来的下载安装命令，回车执行</span></span>
<span class="line">conda install pytorch<span class="token operator">==</span><span class="token number">1.10</span><span class="token number">.1</span> torchvision<span class="token operator">==</span><span class="token number">0.11</span><span class="token number">.2</span> torchaudio<span class="token operator">==</span><span class="token number">0.10</span><span class="token number">.1</span> cudatoolkit<span class="token operator">=</span><span class="token number">10.2</span> <span class="token operator">-</span>c pytorch</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 在保持 pytorch_1.10 环境激活的状态下</span></span>
<span class="line">python  <span class="token comment"># 激活命令行工具中 Python 的使用</span></span>
<span class="line"><span class="token keyword">import</span> torch  <span class="token comment"># 如果pytorch安装成功即可导入</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 查看CUDA是否可用</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>device_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 查看可用的CUDA数量</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>version<span class="token punctuation">.</span>cuda<span class="token punctuation">)</span>  <span class="token comment"># 查看CUDA的版本号</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@tab 创建激活虚拟环境 &amp; 下载 PyTorch</p><figure><img src="`+_+'" alt="1.12 虚拟环境中PyTorch的安装" width="560" tabindex="0" loading="lazy"><figcaption>1.12 虚拟环境中PyTorch的安装</figcaption></figure><p>@tab 验证是否安装成功</p><figure><img src="'+x+'" alt="1.13 验证PyTorch是否安装成功" width="560" tabindex="0" loading="lazy"><figcaption>1.13 验证PyTorch是否安装成功</figcaption></figure><p>:::</p><h2 id="_5-cudnn-可选" tabindex="-1"><a class="header-anchor" href="#_5-cudnn-可选"><span>5. CUDNN（可选）</span></a></h2><p>CUDNN(CUDA Deep Neural Network library)：是 NVIDIA 打造的针对深度神经网络的加速库，是一个用于深层神经网络的 GPU 加速库。</p><p>新手可以不用下载，因为深层神经网络一般都是大模型，刚上手的时候完全用不上。</p><p><strong>参考文献&amp;相关链接：</strong></p>',17)),t("ol",null,[t("li",null,[t("a",G,[n[10]||(n[10]=a("《CUDNN 下载地址》",-1)),s(e)])]),t("li",null,[t("a",V,[n[11]||(n[11]=a("《CUDNN 安装教程》",-1)),s(e)])]),t("li",null,[t("a",I,[n[12]||(n[12]=a("《CUDNN 安装成功验证》",-1)),s(e)])])])])}const L=l(U,[["render",E]]),q=JSON.parse('{"path":"/blogs/DeepLearning/PyTorch/","title":"PyTorch入门手册","lang":"en-US","frontmatter":{"title":"PyTorch入门手册","date":"2024-09-11T00:00:00.000Z","categories":["PyTorch"],"tags":["PyTorch基础","PyTorch安装教程"]},"headers":[{"level":2,"title":"1. GPU 和 显卡驱动","slug":"_1-gpu-和-显卡驱动","link":"#_1-gpu-和-显卡驱动","children":[]},{"level":2,"title":"2. CUDA Toolkit (nvidia)","slug":"_2-cuda-toolkit-nvidia","link":"#_2-cuda-toolkit-nvidia","children":[]},{"level":2,"title":"3. Python 相关","slug":"_3-python-相关","link":"#_3-python-相关","children":[]},{"level":2,"title":"4. PyTorch 安装","slug":"_4-pytorch-安装","link":"#_4-pytorch-安装","children":[]},{"level":2,"title":"5. CUDNN（可选）","slug":"_5-cudnn-可选","link":"#_5-cudnn-可选","children":[]}],"git":{"createdTime":1757688790000,"updatedTime":1758475598000,"contributors":[{"name":"zjk","email":"1213860588@qq.com","commits":2}]},"filePathRelative":"blogs/DeepLearning/PyTorch/README.md"}');export{L as comp,q as data};
