import{_ as c,c as i,b as n,e as t,a as u,d as s,w as e,r as l,o as k}from"./app-DCqdGVAs.js";const r={};function m(d,a){const p=l("CodeGroupItem"),o=l("CodeGroup");return k(),i("div",null,[a[2]||(a[2]=n("h4",{id:"难度-简单",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#难度-简单"},[n("span",null,"难度：简单")])],-1)),a[3]||(a[3]=n("p",null,"给定一个 n×m 的矩阵，请将其转置。转置是指将矩阵的行和列互换，即原矩阵中第 i 行第 j 列的元素在转置后变为第 j 行第 i 列的元素。",-1)),a[4]||(a[4]=n("ul",null,[n("li",null,[n("strong",null,"输入描述"),s("：输入为一个二维数组，表示一个 n×m 的矩阵，矩阵中的元素为整数。")]),n("li",null,[n("strong",null,"输出描述"),s("：输出转置后的矩阵，以与输入相同的格式表示。转置后的矩阵大小为 m×n。")])],-1)),t(o,null,{default:e(()=>[t(p,{title:"代码框架"},{default:e(()=>[...a[0]||(a[0]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"from"),s(" typing "),n("span",{class:"token keyword"},"import"),s(" List"),n("span",{class:"token punctuation"},","),s(" Union")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 使用 Union 来表示类型可以是 int 或 float")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"transpose_matrix"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},":"),s(" List"),n("span",{class:"token punctuation"},"["),s("List"),n("span",{class:"token punctuation"},"["),s("Union"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"float"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(" List"),n("span",{class:"token punctuation"},"["),s("List"),n("span",{class:"token punctuation"},"["),s("Union"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"float"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"pass")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 处理输入输出")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"try"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("        matrix_str "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("strip"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"# 去掉最外层的方括号，并分割每个子数组")]),s(`
`),n("span",{class:"line"},[s("        rows "),n("span",{class:"token operator"},"="),s(" matrix_str"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},":"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),s("split"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'],['"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"# 将每个子数组转换为数字列表")]),s(`
`),n("span",{class:"line"},[s("        matrix "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"list"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(" row"),n("span",{class:"token punctuation"},"."),s("split"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"','"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"for"),s(" row "),n("span",{class:"token keyword"},"in"),s(" rows"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"# 计算转置矩阵")]),s(`
`),n("span",{class:"line"},[s("        result "),n("span",{class:"token operator"},"="),s(" transpose_matrix"),n("span",{class:"token punctuation"},"("),s("matrix"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"# 格式化输出")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"str"),n("span",{class:"token punctuation"},"("),s("result"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("replace"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"' '"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"except"),s(" Exception "),n("span",{class:"token keyword"},"as"),s(" e"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-interpolation"},[n("span",{class:"token string"},'f"输入格式错误: '),n("span",{class:"token interpolation"},[n("span",{class:"token punctuation"},"{"),s("e"),n("span",{class:"token punctuation"},"}")]),n("span",{class:"token string"},'"')]),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"if"),s(" __name__ "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},'"__main__"'),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1}),t(p,{title:"示例 1"},{default:e(()=>[...a[1]||(a[1]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 输入：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"8"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 输出：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"8"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 说明：")]),s(`
`),n("span",{class:"line"},[s("原始矩阵为 "),n("span",{class:"token number"},"2"),s("×"),n("span",{class:"token number"},"3"),s(" 的矩阵：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token number"},"1"),s("  "),n("span",{class:"token number"},"3"),s("  "),n("span",{class:"token number"},"5")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token number"},"6"),s("  "),n("span",{class:"token number"},"8"),s("  "),n("span",{class:"token number"},"10")]),s(`
`),n("span",{class:"line"},[s("转置后变为 "),n("span",{class:"token number"},"3"),s("×"),n("span",{class:"token number"},"2"),s(" 的矩阵：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token number"},"1"),s("  "),n("span",{class:"token number"},"6")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token number"},"3"),s("  "),n("span",{class:"token number"},"8")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token number"},"5"),s("  "),n("span",{class:"token number"},"10")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1})]),_:1}),a[5]||(a[5]=u(`<hr><h4 id="解题思路-1-python-数组处理" tabindex="-1"><a class="header-anchor" href="#解题思路-1-python-数组处理"><span>解题思路 1：Python 数组处理</span></a></h4><p>从图像的视角来看，就是沿着 <mark>左上角到右下角的对角线</mark> 进行一个镜像翻转。我的循环逻辑是，每次循环把每一列的值取出来（每一行的对应 index 的值）组成新的数组，比如 [0][0], [1][0]，1 和 6 取出来，作为第一个数组，[0][1], [1][1]，2 和 8 取出来作为第二个数组，不断的添加进二维数组的变量中。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Union</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">transpose_matrix</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>Union<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>Union<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">    newList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    lenRow <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>lenRow<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">for</span> item <span class="token keyword">in</span> a<span class="token punctuation">:</span></span>
<span class="line">            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        newList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> newList</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解题思路-2-numpy-数组处理" tabindex="-1"><a class="header-anchor" href="#解题思路-2-numpy-数组处理"><span>解题思路 2：Numpy 数组处理</span></a></h4><p>Numpy 的转置只需要 <mark>.T</mark> 即可，别忘记先转换成 nparray，然后再转回 list 就行。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Union</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">transpose_matrix</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>Union<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>Union<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">    arr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># 转为 numpy 数组</span></span>
<span class="line">    transposed <span class="token operator">=</span> arr<span class="token punctuation">.</span>T  <span class="token comment"># 转置</span></span>
<span class="line">    <span class="token keyword">return</span> transposed<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 转回 List</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7))])}const v=c(r,[["render",m]]),y=JSON.parse('{"path":"/blogs/CodeExam/AI/LinearAlgebra/LA2.html","title":"LA2.矩阵转置","lang":"en-US","frontmatter":{"title":"LA2.矩阵转置","date":"2025/09/19","categories":["每日一题"],"tags":["AI题库","线性代数"]},"headers":[],"git":{"createdTime":1758298327000,"updatedTime":1758386370000,"contributors":[{"name":"zjk","email":"1213860588@qq.com","commits":2}]},"filePathRelative":"blogs/CodeExam/AI/LinearAlgebra/LA2.md"}');export{v as comp,y as data};
