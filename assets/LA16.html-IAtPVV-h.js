import{_ as c,c as u,a as l,e as t,w as e,r as o,o as r,b as n,d as s}from"./app-DCqdGVAs.js";const k={};function m(d,a){const p=o("CodeGroupItem"),i=o("CodeGroup");return r(),u("div",null,[a[2]||(a[2]=l('<h4 id="难度-简单" tabindex="-1"><a class="header-anchor" href="#难度-简单"><span>难度：简单</span></a></h4><p>实现一个函数以执行 Phi 变换，通过生成多项式特征将输入特征映射到更高维的空间。这种变换允许像线性回归这样的模型通过引入表示原始输入特征多项式组合的新特征维度来拟合非线性数据。</p><p>例如，对于输入特征 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mtext>，</mtext><mi>d</mi><mi>e</mi><mi>g</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">x，degree=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">ree</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span> 的多项式特征将生成 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>x</mi><mo separator="true">,</mo><msup><mi>x</mi><mn>2</mn></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1,x,x^{2}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>。这种转换使得线性模型可以学习非线性关系。</p><ul><li><strong>输入描述</strong>： <ol><li>第一行为一个数值列表，表示需要转换的特征值</li><li>第二行为一个整数，表示多项式的次数（degree）</li></ol></li><li><strong>输出描述</strong>：输出一个嵌套列表，其中每个内部列表包含一个数据点的转换后的特征。 <ol><li>每个内部列表的长度为 degree+1，包含从 0 次幂到 degree 次幂的值。</li><li>如果 degree 小于 0 或输入列表为空，则返回空列表。</li></ol></li></ul>',4)),t(i,null,{default:e(()=>[t(p,{title:"代码框架"},{default:e(()=>[...a[0]||(a[0]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(" numpy "),n("span",{class:"token keyword"},"as"),s(" np")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"phi_transform"),n("span",{class:"token punctuation"},"("),s("data"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token builtin"},"list"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"float"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" degree"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token builtin"},"list"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"list"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"float"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("	"),n("span",{class:"token triple-quoted-string string"},'"""'),s(`
`),n("span",{class:"line"},"	Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features."),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},"	Args:"),s(`
`),n("span",{class:"line"},"		data (list[float]): A list of numerical values to transform."),s(`
`),n("span",{class:"line"},"		degree (int): The degree of the polynomial expansion."),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},"	Returns:"),s(`
`),n("span",{class:"line"},"		list[list[float]]: A nested list where each inner list represents the transformed features of a data point."),s(`
`),n("span",{class:"line"},'	"""')]),s(`
`),n("span",{class:"line"},[s("	"),n("span",{class:"token keyword"},"pass")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"if"),s(" __name__ "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},'"__main__"'),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    data "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"eval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    degree "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("phi_transform"),n("span",{class:"token punctuation"},"("),s("data"),n("span",{class:"token punctuation"},","),s(" degree"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1}),t(p,{title:"示例 1"},{default:e(()=>[...a[1]||(a[1]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 输入：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2.0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3.0"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token number"},"2")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 输出：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1.0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2.0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4.0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1.0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3.0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"9.0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1})]),_:1}),a[3]||(a[3]=l(`<hr><h4 id="解题思路-1-python" tabindex="-1"><a class="header-anchor" href="#解题思路-1-python"><span>解题思路 1：Python</span></a></h4><p>解题思路很简单，首先是对于输出条件 2 的判定，如果 degree 小于 0 或者 data 为空，返回空列表，直接放在顶端判断。</p><p>其次是新列表的构造，有几个值就有几个新的一维数组，所以最外层的循环是 len(data)。其内部之所以要用三个条件判断，是因为 if else 的资源消耗远远小于对数据做指数运算，只有需要对其平方、立方、以及更多的时候，才进行第二次循环，做指数运算。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">phi_transform</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">,</span> degree<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">if</span> degree <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">	arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">	<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">if</span> degree <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">			arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">			<span class="token keyword">continue</span></span>
<span class="line"></span>
<span class="line">		temp_data <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">		temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> temp_data<span class="token punctuation">]</span></span>
<span class="line">		<span class="token keyword">if</span> degree <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">			arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">			<span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> degree<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">				temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp_data<span class="token operator">**</span>j<span class="token punctuation">)</span></span>
<span class="line">		arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">return</span> arr</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解题思路-2-numpy" tabindex="-1"><a class="header-anchor" href="#解题思路-2-numpy"><span>解题思路 2：Numpy</span></a></h4><p>Numpy 中的 <strong>多项式特征扩展</strong> 是有对应的函数的。<mark>vander(data)</mark> 函数生成范德蒙矩阵：</p><ol><li><strong>data 参数</strong>：表示输入的数组数据，可以是 python 的 list，也可以是 np 的 array。</li><li><strong>N 参数</strong>：表示内部列表的长度，如题目描述所说 = degree + 1。</li><li><strong>increasing 参数</strong>：True 表示升序排列 [1, 3, 9]；False 表示降序排列 [9, 3, 1]。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">phi_transform</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">,</span> degree<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">if</span> degree <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">	new_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">	<span class="token keyword">return</span> np<span class="token punctuation">.</span>vander<span class="token punctuation">(</span>new_data<span class="token punctuation">,</span> N<span class="token operator">=</span>degree<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> increasing<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9))])}const v=c(k,[["render",m]]),g=JSON.parse('{"path":"/blogs/CodeExam/AI/LinearAlgebra/LA16.html","title":"LA16.多项式特征的Phi变换","lang":"en-US","frontmatter":{"title":"LA16.多项式特征的Phi变换","date":"2025/10/02","categories":["每日一题"],"tags":["AI题库","线性代数"]},"headers":[],"git":{"createdTime":1759395480000,"updatedTime":1759395480000,"contributors":[{"name":"jinkai","email":"1213860588@qq.com","commits":1}]},"filePathRelative":"blogs/CodeExam/AI/LinearAlgebra/LA16.md"}');export{v as comp,g as data};
