import{_ as l,c as e,a as t,b as s,d as a,o as i}from"./app-DxZOFQRu.js";const p="/blog-vp-reco/machinelearning/three/08-01.png",m="/blog-vp-reco/machinelearning/three/08-02.png",r="/blog-vp-reco/machinelearning/three/08-03.png",c="/blog-vp-reco/machinelearning/three/08-04.png",o="/blog-vp-reco/machinelearning/three/08-05.png",g="/blog-vp-reco/machinelearning/three/08-06.png",h="/blog-vp-reco/machinelearning/three/08-07.png",d="/blog-vp-reco/machinelearning/three/08-08.png",u="/blog-vp-reco/machinelearning/three/08-09.png",v="/blog-vp-reco/machinelearning/three/08-10.png",y="/blog-vp-reco/machinelearning/three/08-11.png",f="/blog-vp-reco/machinelearning/three/08-12.png",b={};function _(k,n){return i(),e("div",null,n[0]||(n[0]=[t('<p>决策树模型（Decision Tree Model）</p><h2 id="_1-决策树模型概述" tabindex="-1"><a class="header-anchor" href="#_1-决策树模型概述"><span>1. 决策树模型概述</span></a></h2><p>为了解释决策树的工作原理，吴恩达教授使用了“猫分类”的任务作为示例。</p><p>假设你正在经营一家猫收养中心，并给定了一些特征，你想训练一个分类器来快速告诉你，这个动物是否是猫。</p><p>这里有 10 个数据的训练集，每一个训练对象，都拥有关于动物的<strong>耳朵形状、面部形状、是否有胡须</strong>的特征，最右侧一列是你想要预测的这只动物的真实标签。</p><figure><img src="'+p+'" alt="8.1 猫收养中心数据集" width="560" tabindex="0" loading="lazy"><figcaption>8.1 猫收养中心数据集</figcaption></figure><p>比如：第一个例子有尖耳朵、圆脸、有胡须，是一只猫；第二个例子有松软的耳朵、脸型不是圆的、有胡须，也是一只猫。剩余的例子类同。</p><p>我们发现特征值 x1，x2，x3 都是离散的值（目前每个特征只有两种可能值），而预测值也仅为 0 和 1，所以这是一个二元分类任务。</p><p>那么什么是决策树呢？这是你在刚刚看到的训练决策树学习算法之后，可能获得的一种模型示例：</p><figure><img src="'+m+'" alt="8.2 决策树概述1" width="560" tabindex="0" loading="lazy"><figcaption>8.2 决策树概述1</figcaption></figure><p>这个模型看起来就像一棵树（我猜这个科学家应该很喜欢圣诞树），这样的图也就是计算机科学家们所说的树（图）。</p><ul><li>顶部的节点被称为：根节点（root node）</li><li>中间的节点被称为：决策节点（decision nodes）</li><li>底部的节点被称为：叶子节点（leaf nodes）</li></ul><p>其实啊，我们知道树有很多枝干，枝干上可能还有枝干，每次走到分叉路口的时候，就像做了一次条件判断（if …… else ……），整体来看的话，假设树有 n 层，那么条件判断就有 n-1 层，因为叶子节点没有往下再分叉了。</p><p>刚才说了，上图只是一种可能的决策树模型，实现一个目标的途中，我们可能有很多种手段，很多种方法，就如同下图：</p><figure><img src="'+r+'" alt="8.3 决策树概述2" width="560" tabindex="0" loading="lazy"><figcaption>8.3 决策树概述2</figcaption></figure><p>当然了，《孙子兵法》都会分上策、中策、下策，不同决策树模型的表现自然也有优劣之分。<strong>决策树学习算法的工作就是：从所有可能的决策树当中，尝试选择一个在训练集上表现良好的树，然后可以理想的泛化到交叉验证集和测试集等新数据上。</strong></p><h3 id="_1-1-学习过程-learning-process" tabindex="-1"><a class="header-anchor" href="#_1-1-学习过程-learning-process"><span>1.1 学习过程（Learning Process）</span></a></h3><p>决策树学习模型构建的过程有点像“先序排序”：从根节点开始，往左边的的分支开始拓展，一直到叶子节点，在返回父节点去拓展右边的分支。</p><p>在构建的过程中，有一些关键决定需要注意：</p><p><strong>（1）如何选择在每一个节点上使用哪些特征进行拆分？</strong></p><figure><img src="'+c+'" alt="8.4 如何进行特征拆分" width="560" tabindex="0" loading="lazy"><figcaption>8.4 如何进行特征拆分</figcaption></figure><p>要尽可能的提高纯度。所谓纯度是指让分类之后的集合，尽可能的接近所有猫或所有狗的子集。这样会让树的高度最小化，算法的性能最优化。</p><p><strong>（2）决定何时停止分裂/分叉</strong></p><ol><li><p>让节点之后的子集，100%属于一个类别。比如只有猫，或者只有狗。</p></li><li><p>限制节点的深度，比如 depth=2 时就停下，不再分类。它可以保证我们的树不会变得太大和笨重，防止过拟合。</p></li><li><p>限制纯度的比例。比如子集中的猫的比例一旦大于 80%，就不再进行分裂。</p></li><li><p>限制节点的示例数量。比如某个节点中，示例数量只有 3 个了，就不再进行分裂了。</p></li></ol><h3 id="_1-2-纯度-purity" tabindex="-1"><a class="header-anchor" href="#_1-2-纯度-purity"><span>1.2 纯度（Purity）</span></a></h3><p>如果节点中的示例，混杂着猫和狗，你如何量化这组数据有多纯？我们先来看熵（entropy）的定义，它是衡量一组数据不纯程度的指标。</p><figure><img src="'+o+'" alt="8.5 纯度" width="560" tabindex="0" loading="lazy"><figcaption>8.5 纯度</figcaption></figure><p>我们将 p1 定义为“示例当中猫所占的比例/分数”，根据图示，会得到 p1=0.5 时，不纯度 H(p1) 最高，等于 1；而 p1 越靠近 1（全是猫），或者越靠近 0（全是狗）时，不纯度 H(p1) 最低，为 0。</p><p>在计算熵时，对数函数以 2 为底，而非以 e 为底。因为以 2 为底，曲线的峰值会如同上图所示，为 1，如果取自然对数 e 为底，图像仍然有效，只是垂直也就是纵轴上缩放了这个图像，让数字变的不再是整数，不好去计量。</p>',29),s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mtable",{rowspacing:"0.25em",columnalign:"right left",columnspacing:"0em"},[s("mtr",null,[s("mtd",{class:"mtr-glue"}),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mi",null,"H"),s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"p"),s("mn",null,"1")]),s("mo",{stretchy:"false"},")")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mo",null,"−"),s("msub",null,[s("mi",null,"p"),s("mn",null,"1")]),s("mi",null,"log"),s("mo",null,"⁡"),s("msub",null,[s("mi",null,"p"),s("mn",null,"1")]),s("mo",null,"−"),s("msub",null,[s("mi",null,"p"),s("mn",null,"0")]),s("mi",null,"log"),s("mo",null,"⁡"),s("msub",null,[s("mi",null,"p"),s("mn",null,"0")])])])]),s("mtd",{class:"mtr-glue"}),s("mtd",{class:"mml-eqn-num"})]),s("mtr",null,[s("mtd",{class:"mtr-glue"}),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mo",null,"−"),s("msub",null,[s("mi",null,"p"),s("mn",null,"1")]),s("mi",null,"log"),s("mo",null,"⁡"),s("msub",null,[s("mi",null,"p"),s("mn",null,"1")]),s("mo",null,"−"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"−"),s("msub",null,[s("mi",null,"p"),s("mn",null,"1")]),s("mo",{stretchy:"false"},")"),s("mi",null,"log"),s("mo",null,"⁡"),s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"−"),s("msub",null,[s("mi",null,"p"),s("mn",null,"1")]),s("mo",{stretchy:"false"},")")])])])]),s("mtd",{class:"mtr-glue"}),s("mtd",{class:"mml-eqn-num"})])]),s("annotation",{encoding:"application/x-tex"},"\\begin{align} H(p_{1}) &= -p_{1}\\log{p_{1}} - p_{0}\\log{p_{0}} \\\\ &= -p_{1}\\log{p_{1}} - (1-p_{1})\\log{(1-p_{1})} \\end{align} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"3em","vertical-align":"-1.25em"}}),s("span",{class:"mtable"},[s("span",{class:"col-align-r"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.75em"}},[s("span",{style:{top:"-3.91em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"p"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},")")])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.25em"}},[s("span")])])])]),s("span",{class:"col-align-l"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.75em"}},[s("span",{style:{top:"-3.91em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"−"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"p"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[a("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"p"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"p"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"0")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[a("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"p"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"0")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"−"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"p"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[a("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"p"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"p"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[a("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"p"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},")")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.25em"}},[s("span")])])])])])]),s("span",{class:"tag"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.75em"}},[s("span",{style:{top:"-3.75em"}},[s("span",{class:"pstrut",style:{height:"2.84em"}}),s("span",{class:"eqn-num"})]),s("span",{style:{top:"-2.25em"}},[s("span",{class:"pstrut",style:{height:"2.84em"}}),s("span",{class:"eqn-num"})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.25em"}},[s("span")])])])])])])])],-1),t('<p>无论是 p0 趋近于 0，还是 p1 趋近于 0，公式都会变成 0log(0) 这样的形式，在数学领域来说，这个值是趋近于负无穷的，但是在这里呢，它就等于 0。</p><h3 id="_1-3-信息增益与特征拆分-choosing-a-split-information-gain" tabindex="-1"><a class="header-anchor" href="#_1-3-信息增益与特征拆分-choosing-a-split-information-gain"><span>1.3 信息增益与特征拆分（Choosing a split: Information Gain）</span></a></h3><p>在构建决策树时，我们决定在节点上拆分哪个特征，取决于哪种特征最能减少熵。减少熵就意味着增加了纯度，在决策树学习中，<mark>熵的减少也被称为信息增益</mark>。</p><figure><img src="'+g+'" alt="8.6 信息增益" width="560" tabindex="0" loading="lazy"><figcaption>8.6 信息增益</figcaption></figure><p>计算纯度和熵的步骤如同上一小节一样，而信息增益是通过 <strong>（根节点的熵 - 子节点熵）的加权求和</strong> 来计算的。</p><p>1 <strong>加权求和</strong>是因为决定特征拆分的好坏不单纯取决于纯度，如果分支的一边数量很多，另一边数量很少，也会影响到运算的效率，和最后的结果。</p><p>2 计算熵的减少，而不直接使用左右分支的熵，是因为“决定何时不再进一步分裂的停止标准之一是：熵的减少是否太小”。</p><p>通过图示我们可以知道，对“耳朵形状”这个特征进行拆分，可以使“熵的减少”最大化。因此根节点从耳朵形状特征进行拆分是最好的选择。</p><p>总结一下，我们用 w 来表示权重，也就是“子节点的数量/父节点的数量”，用 上标 root 代表根节点、上标 left 代表左边的子节点、上标 right 代表右边的子节点，我们就可以得到信息增益的公式：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mi mathvariant="normal">_</mi><mi>g</mi><mi>a</mi><mi>i</mi><mi>n</mi><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><msubsup><mi>p</mi><mn>1</mn><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi></mrow></msubsup><mo stretchy="false">)</mo><mo>−</mo><mrow><mo fence="true">(</mo><msup><mi>w</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msup><mi>H</mi><mo stretchy="false">(</mo><msubsup><mi>p</mi><mn>1</mn><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msubsup><mo stretchy="false">)</mo><mo>+</mo><msup><mi>w</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msup><mi>H</mi><mo stretchy="false">(</mo><msubsup><mi>p</mi><mn>1</mn><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msubsup><mo stretchy="false">)</mo><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">I\\_gain = H(p_{1}^{root}) - \\left( w^{left}H(p_{1}^{left})+w^{right}H(p_{1}^{right}) \\right) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9933em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">ain</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0936em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8436em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">roo</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.8em;vertical-align:-0.65em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.967em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.1809em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.967em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.1809em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span></span></span></span></p><h3 id="_1-4-整合-putting-it-together" tabindex="-1"><a class="header-anchor" href="#_1-4-整合-putting-it-together"><span>1.4 整合（Putting it together）</span></a></h3><p>构建决策树的全过程一般如下：</p><ol><li><p>从所有训练示例（根节点）开始，计算所有可能特征的信息增益，并选出最高信息增益的特征。</p></li><li><p>以所选的特征为节点，将数据集拆分为两个子集，创建树的左右分支，并将两个子集分别发送到左右分支。</p></li><li><p>以新的左右节点为根节点，重复 1 和 2 的步骤继续延伸决策树，直到满足条件为止。相关的条件在 1.1 小节学习过程中已有提到。</p></li></ol><h2 id="_2-多个特征和可能值" tabindex="-1"><a class="header-anchor" href="#_2-多个特征和可能值"><span>2. 多个特征和可能值</span></a></h2><h3 id="_2-1-单热编码-one-hot-encoding" tabindex="-1"><a class="header-anchor" href="#_2-1-单热编码-one-hot-encoding"><span>2.1 单热编码（One-hot encoding）</span></a></h3><p>在之前的案例中，每个特征只有两个可能值，如果有多个呢？假设“耳朵形状”现在有三个可能值：尖耳朵、松软的耳朵、圆耳朵。</p><p>我们可以将“耳朵形状”这个特征拆分成三个特征：“尖耳朵”、“松软的耳朵”、“圆耳朵”，这三个新特征都以 0 和 1 进行编码。对于这三个特征而言，每一个训练对象，只可能有一个特征是 1，所以叫做 one-hot。</p><figure><img src="'+h+'" alt="8.7 one-hot编码" width="560" tabindex="0" loading="lazy"><figcaption>8.7 one-hot编码</figcaption></figure><p>同样的，对于“脸部形状”，“是否有胡须”，同样也可以将可能值替换成 0 和 1 的编码。</p><p>one-hot 编码不仅仅只适用于决策树模型，神经网络中很多模型都可以通过 one-hot 方式对分类特征进行编码，以便它可以作为输入，发送到神经网络，也可以作为数字输入。</p><h3 id="_2-2-连续值的特征-continuous-valued-features" tabindex="-1"><a class="header-anchor" href="#_2-2-连续值的特征-continuous-valued-features"><span>2.2 连续值的特征（Continuous valued features）</span></a></h3><p>之前的猫狗案例所代表的是少数的、离散值的特征。如果有连续的特征应该如何处理？我们还是从一个例子开始，给猫收容中心添加一个特征：重量。</p><div class="layout"><figure><img src="'+d+'" alt="8.8 连续特征值1" width="360" tabindex="0" loading="lazy"><figcaption>8.8 连续特征值1</figcaption></figure><figure><img src="'+u+'" alt="8.9 连续特征值2" width="360" tabindex="0" loading="lazy"><figcaption>8.9 连续特征值2</figcaption></figure></div><p>在上图中，横轴表示重量，纵轴上方表示猫（1），下方表示非猫（0），如果我们要根据权重是否小于等于某个值来拆分数据，拆分方式如图中的竖线，分别是 &lt;=8，&lt;=9，&lt;=13。</p><p>在对权重特征进行约束拆分时，我们应该做的是考虑这个阈值的许多不同值，选择一个最好的。这里的<strong>最好</strong>是指产生最佳信息增益的那个。根据图中的计算，很明显，weight&lt;=9 时，信息增益最大。</p><p>正常情况下不可能只拆分三次，一种惯例是，根据权重或此特征的值，对所有的示例进行排序，并取所有处于已排序训练列表之间的中点的值。</p><h2 id="_3-多个决策树" tabindex="-1"><a class="header-anchor" href="#_3-多个决策树"><span>3. 多个决策树</span></a></h2><p>使用单个决策树的缺点之一是，该决策树可能对数据中的微小变化高度敏感。使树的分支不那么敏感，或者说变得更健壮的一种解决方案是，构建很多个决策树，我们称之为<strong>树集成（tree ensemble）</strong>。</p><p>在之前的十个数据中，“耳朵形状”是信息增益最高的特征，但是如果换一批，甚至是换一个数据，拆分的最高信息增益特征，可能就会变成“胡须有无”，或者“脸部形状”。</p><p>这种仅仅改变几个训练样本，就导致算法在根部产生不同的分裂，从而产生一颗完全不同的树，会使得算法不那么健壮。因此，一般情况下会训练一大堆不同的决策树，把它们集成起来，会让预测的结果更加准确。</p><figure><img src="'+v+'" alt="8.10 多个决策树" width="560" tabindex="0" loading="lazy"><figcaption>8.10 多个决策树</figcaption></figure><p>比如我们训练出来了三棵树，现在要对右上角这个新样本进行预测，我们需要让这三棵树进行投票（少数服从多数）。其中两棵树预测是猫，一个树预测不是猫，根据投票结果，我们预测这个样本是猫（bingo，预测正确）。</p><h3 id="_3-1-有放回抽样-sampling-with-replacement" tabindex="-1"><a class="header-anchor" href="#_3-1-有放回抽样-sampling-with-replacement"><span>3.1 有放回抽样（sampling with replacement）</span></a></h3><p>为了构建树集成，我们需要采用“有放回抽样”这个技术，直译过来应该是“替换抽样”。它的原理很好理解，就是抽出来的样本，放回去，再进行抽取。</p><figure><img src="'+y+`" alt="8.11 有放回抽样" width="560" tabindex="0" loading="lazy"><figcaption>8.11 有放回抽样</figcaption></figure><p>就比如，我们把猫狗的十个样本放入箱子里，随机抽，抽完放回去，打乱之后再抽，直到抽取到 10 个。观察图中表格可以发现，诶，灰色的猫和黄色的狗有重复，没关系，下一组 10 个数据，可能重复的就不是它们两了。</p><p>有放回抽样的过程可以让你构建一个新的训练集，它与你原来的训练集有点相似，但也有很大的不同。事实证明，它是构建树集合的关键。</p><h3 id="_3-2-随机森林算法-random-forest-algorithm" tabindex="-1"><a class="header-anchor" href="#_3-2-随机森林算法-random-forest-algorithm"><span>3.2 随机森林算法（Random forest algorithm）</span></a></h3><p><strong>装袋法（bagging method）</strong> 构建树集成的过程如下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 给你一个大小为m的训练集</span></span>
<span class="line">train_simples <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment"># 循环B-1次</span></span>
<span class="line"><span class="token keyword">for</span> b<span class="token operator">=</span><span class="token number">1</span> to B<span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 用可放回抽样生成一个新的大小为m的训练集</span></span>
<span class="line">    new_train_simples <span class="token operator">=</span> function<span class="token punctuation">(</span>sampling <span class="token keyword">with</span> replacement<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment"># 在这个新的训练集上训练出一个决策树模型</span></span>
<span class="line">    decision_tree <span class="token operator">=</span> function<span class="token punctuation">(</span>new_train_simples<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是 B 的大小一般不会超过 100，在远大于 100，如 500、1000 棵树的情况下，只会显著的降低计算速度，而不会显著的提高整体算法的性能。</p><p>如果一个数据集有一个很强的预测特征，那么通过装袋法构建的大多数决策树，根节点或附近节点的特征选择是相同的。这样一来，树集成与单颗树相比，不会让性能提高太多。</p><p><strong>随机森林</strong> 其实是对装袋法的一种改进。假设一共有 n 个特征，装袋法构建树的时候是将所有特征都考虑进去的，而随机森林是在每一个分裂节点时，只随机选取 k 个特征，通常 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">k=\\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.2397em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8003em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.7603em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2397em;"><span></span></span></span></span></span></span></span></span>。</p><p>如果 k=n，随机森林和装袋法其实是一样的，所有的特征都考虑。因此 k 一定是小于 n 的，这样一来每个节点的可选的特征大量减小，运算量大幅减少，同时树的平均值会有更小的方差，更加可信。</p><h3 id="_3-3-xgboost-extreme-gradient-boosting" tabindex="-1"><a class="header-anchor" href="#_3-3-xgboost-extreme-gradient-boosting"><span>3.3 XGBoost（eXtreme Gradient Boosting）</span></a></h3><p>多年来，研究人员想出了很多不同的方法来构建决策树，和基于样本的决策树。如今，决策树最常用的一个方法叫做 XGBoost，它运行速度快，开源，并且易于使用，赢得过许多机器学习竞赛，也应用于许多商业应用程序。</p><p>它仅仅做了一个改变，就是从第二遍的循环开始，将关注点集中在哪些表现的不好的的训练数据上。</p><p>我们联想一个现实中的例子，假设我们在弹钢琴，想要提高某个曲子的演奏能力，整首演奏下来可能要 30 分钟甚至 1 个小时，重复的练习完整的曲子，即耗时间又效率低下，很可能还会挫伤我们的自信心（显卡高负荷长时间运转，损耗也会加剧）。</p><p>最好的方法就是，我们选择一个没练习过的片段，反复的练习，熟练之后再选一个片段，反复的练习。这样会让熟练度和演奏能力快速提升。</p><p>XGBoost 的原理也是这样，在第一次训练完成后，对原始数据集进行预测，随机挑选出一个或多个预测错误的案例来，在下一个循环，构建新数据集的时候，加入这些挑选出来的“预测错误的数据”。</p><figure><img src="`+f+`" alt="8.12 XGBoost" width="560" tabindex="0" loading="lazy"><figcaption>8.12 XGBoost</figcaption></figure><p>XGBoost 的创新之一，是它还内置了正则化方法，以防止过度拟合。它的原理讲起来简单，但是实现起来还是挺复杂的，因此大多数程序员都会选择使用它的开源库。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> xgboost <span class="token keyword">import</span> XGBClassifier</span>
<span class="line"></span>
<span class="line">model <span class="token operator">=</span> XGBClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 分类问题</span></span>
<span class="line">model <span class="token operator">=</span> XGBRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 回归问题</span></span>
<span class="line"></span>
<span class="line">model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span></span>
<span class="line">y_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-何时使用决策树" tabindex="-1"><a class="header-anchor" href="#_4-何时使用决策树"><span>4. 何时使用决策树</span></a></h2><p>决策树和神经网络都是非常强大、非常有效的学习算法。我们来对比一下两种的优劣：</p><p><strong>决策树•树集成</strong></p><ol><li><p>适用于表格数据，或者说结构化数据。</p></li><li><p>不推荐用在非结构化数据上，比如：图片、视频、音频、文本等。</p></li><li><p>训练速度非常快。</p></li><li><p>小的决策树，对于人而言，是有很好的解释性的。</p></li></ol><p><strong>神经网络</strong></p><ol><li><p>适用于所有类型的数据，结构化的和非结构化的。</p></li><li><p>一般来说，训练速度会比决策树慢，尤其是大型神经网络。</p></li><li><p>可以迁移学习。对于许多应用程序，我们只需要一个小数据集，就能够使用迁移学习并对更大的数据集进行预训练，这个特性是一个很有竞争力的点。</p></li><li><p>如果你正在构建一个，多个机器学习模型协同工作的系统，那么将多个神经网络串在一起进行训练，可能比多个决策树更加容易。</p></li></ol>`,59)]))}const x=l(b,[["render",_]]),z=JSON.parse('{"path":"/blogs/intelligence/MachineLearning/08_decision_tree.html","title":"2-4 决策树模型","lang":"en-US","frontmatter":{"title":"2-4 决策树模型","order":8,"author":"AOSAI","date":"2024-08-06T00:00:00.000Z","category":["机器学习"],"tag":["决策树"]},"headers":[{"level":2,"title":"1. 决策树模型概述","slug":"_1-决策树模型概述","link":"#_1-决策树模型概述","children":[{"level":3,"title":"1.1 学习过程（Learning Process）","slug":"_1-1-学习过程-learning-process","link":"#_1-1-学习过程-learning-process","children":[]},{"level":3,"title":"1.2 纯度（Purity）","slug":"_1-2-纯度-purity","link":"#_1-2-纯度-purity","children":[]},{"level":3,"title":"1.3 信息增益与特征拆分（Choosing a split: Information Gain）","slug":"_1-3-信息增益与特征拆分-choosing-a-split-information-gain","link":"#_1-3-信息增益与特征拆分-choosing-a-split-information-gain","children":[]},{"level":3,"title":"1.4 整合（Putting it together）","slug":"_1-4-整合-putting-it-together","link":"#_1-4-整合-putting-it-together","children":[]}]},{"level":2,"title":"2. 多个特征和可能值","slug":"_2-多个特征和可能值","link":"#_2-多个特征和可能值","children":[{"level":3,"title":"2.1 单热编码（One-hot encoding）","slug":"_2-1-单热编码-one-hot-encoding","link":"#_2-1-单热编码-one-hot-encoding","children":[]},{"level":3,"title":"2.2 连续值的特征（Continuous valued features）","slug":"_2-2-连续值的特征-continuous-valued-features","link":"#_2-2-连续值的特征-continuous-valued-features","children":[]}]},{"level":2,"title":"3. 多个决策树","slug":"_3-多个决策树","link":"#_3-多个决策树","children":[{"level":3,"title":"3.1 有放回抽样（sampling with replacement）","slug":"_3-1-有放回抽样-sampling-with-replacement","link":"#_3-1-有放回抽样-sampling-with-replacement","children":[]},{"level":3,"title":"3.2 随机森林算法（Random forest algorithm）","slug":"_3-2-随机森林算法-random-forest-algorithm","link":"#_3-2-随机森林算法-random-forest-algorithm","children":[]},{"level":3,"title":"3.3 XGBoost（eXtreme Gradient Boosting）","slug":"_3-3-xgboost-extreme-gradient-boosting","link":"#_3-3-xgboost-extreme-gradient-boosting","children":[]}]},{"level":2,"title":"4. 何时使用决策树","slug":"_4-何时使用决策树","link":"#_4-何时使用决策树","children":[]}],"git":{"createdTime":1757688790000,"updatedTime":1757688790000,"contributors":[{"name":"jinkai","email":"1213860588@qq.com","commits":1}]},"filePathRelative":"blogs/intelligence/MachineLearning/08_decision_tree.md"}');export{x as comp,z as data};
