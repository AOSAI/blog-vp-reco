import{_ as i,c as u,a as l,e,w as t,r as c,o as r,b as n,d as s}from"./app-CkYqgEgS.js";const d={};function k(m,a){const p=c("CodeGroupItem"),o=c("CodeGroup");return r(),u("div",null,[a[2]||(a[2]=l('<h4 id="难度-简单" tabindex="-1"><a class="header-anchor" href="#难度-简单"><span>难度：简单</span></a></h4><p>编写一个函数来计算两个向量的点积。该函数应接受两个一维 NumPy 数组作为输入，并返回一个单一的数字作为点积。</p><ul><li><strong>输入描述</strong>： <ol><li>第一行输入一个一维 NumPy 数组，表示第一个向量。</li><li>第二行输入一个一维 NumPy 数组，表示第二个向量。</li></ol></li><li><strong>输出描述</strong>：输出一个单一的数字，表示两个向量的点积。</li></ul>',3)),e(o,null,{default:t(()=>[e(p,{title:"代码框架"},{default:t(()=>[...a[0]||(a[0]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(" numpy "),n("span",{class:"token keyword"},"as"),s(" np")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"calculate_dot_product"),n("span",{class:"token punctuation"},"("),s("vec1"),n("span",{class:"token punctuation"},","),s(" vec2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token triple-quoted-string string"},'"""'),s(`
`),n("span",{class:"line"},"    Calculate the dot product of two vectors."),s(`
`),n("span",{class:"line"},"    Args:"),s(`
`),n("span",{class:"line"},"        vec1 (numpy.ndarray): 1D array representing the first vector."),s(`
`),n("span",{class:"line"},"        vec2 (numpy.ndarray): 1D array representing the second vector."),s(`
`),n("span",{class:"line"},"    Returns:"),s(`
`),n("span",{class:"line"},"        float: Dot product of the two vectors."),s(`
`),n("span",{class:"line"},'    """')]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"pass")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"if"),s(" __name__ "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},'"__main__"'),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    vec1 "),n("span",{class:"token operator"},"="),s(" np"),n("span",{class:"token punctuation"},"."),s("array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"eval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    vec2 "),n("span",{class:"token operator"},"="),s(" np"),n("span",{class:"token punctuation"},"."),s("array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"eval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("calculate_dot_product"),n("span",{class:"token punctuation"},"("),s("vec1"),n("span",{class:"token punctuation"},","),s(" vec2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1}),e(p,{title:"示例 1"},{default:t(()=>[...a[1]||(a[1]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 输入：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 输出：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token number"},"32")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1})]),_:1}),a[3]||(a[3]=l(`<hr><h4 id="解题思路-1-numpy" tabindex="-1"><a class="header-anchor" href="#解题思路-1-numpy"><span>解题思路 1：Numpy</span></a></h4><p>它这个难度突然骤减到这样，我还挺不适应的。这个题甚至比 LA1 还简单，就是两个向量相乘，直接用 @ 或 np.dot() 完成即可。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">calculate_dot_product</span><span class="token punctuation">(</span>vec1<span class="token punctuation">,</span> vec2<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> vec1 @ vec2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解题思路-2-python" tabindex="-1"><a class="header-anchor" href="#解题思路-2-python"><span>解题思路 2：Python</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">calculate_dot_product</span><span class="token punctuation">(</span>vec1<span class="token punctuation">,</span> vec2<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    result <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>vec1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> vec2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>vec1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> result</span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span></span>
<span class="line">    vec1 <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    vec2 <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>calculate_dot_product<span class="token punctuation">(</span>vec1<span class="token punctuation">,</span> vec2<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6))])}const b=i(d,[["render",k]]),y=JSON.parse('{"path":"/blogs/CodeExam/AI/LinearAlgebra/LA15.html","title":"LA15.点积计算器","lang":"en-US","frontmatter":{"title":"LA15.点积计算器","date":"2025/10/01","categories":["每日一题"],"tags":["AI题库","线性代数"]},"headers":[],"git":{"createdTime":1759087649000,"updatedTime":1759309824000,"contributors":[{"name":"jinkai","email":"1213860588@qq.com","commits":2}]},"filePathRelative":"blogs/CodeExam/AI/LinearAlgebra/LA15.md"}');export{b as comp,y as data};
