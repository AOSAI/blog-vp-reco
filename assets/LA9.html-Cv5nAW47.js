import{_ as i,c as u,a as l,e,w as t,r as o,o as r,b as n,d as s}from"./app-DCqdGVAs.js";const k={};function d(m,a){const p=o("CodeGroupItem"),c=o("CodeGroup");return r(),u("div",null,[a[2]||(a[2]=l('<h4 id="难度-简单" tabindex="-1"><a class="header-anchor" href="#难度-简单"><span>难度：简单</span></a></h4><p>实现一个函数来将密集矩阵（dense matrix）转换为压缩行稀疏（Compressed Row Sparse, CSR）格式。CSR 是一种高效存储稀疏矩阵的方法，只存储非零元素及其位置信息。</p><p>CSR 格式由三个数组组成：</p><ol><li>values：按行优先顺序存储的非零元素值</li><li>column_indices：每个非零元素对应的列索引</li><li>row_pointer：指示每行起始位置的指针数组</li></ol><ul><li><strong>输入描述</strong>：输入为一个二维列表 dense_matrix，表示待转换的密集矩阵。</li><li><strong>输出描述</strong>：输出三个列表，分别表示 CSR 格式中的 values、column_indices 和 row_pointer。</li></ul>',5)),e(c,null,{default:t(()=>[e(p,{title:"代码框架"},{default:t(()=>[...a[0]||(a[0]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"compressed_row_sparse_matrix"),n("span",{class:"token punctuation"},"("),s("dense_matrix"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(" vals"),n("span",{class:"token punctuation"},","),s(" col_idx"),n("span",{class:"token punctuation"},","),s(" row_ptr")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"if"),s(" __name__ "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},'"__main__"'),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    dense_matrix "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"eval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    vals"),n("span",{class:"token punctuation"},","),s(" col_idx"),n("span",{class:"token punctuation"},","),s(" row_ptr "),n("span",{class:"token operator"},"="),s(" compressed_row_sparse_matrix"),n("span",{class:"token punctuation"},"("),s("dense_matrix"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("vals"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("col_idx"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("row_ptr"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1}),e(p,{title:"示例 1"},{default:t(()=>[...a[1]||(a[1]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 输入：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 输出：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1})]),_:1}),a[3]||(a[3]=l(`<hr><h4 id="解题思路-1-python-数组手搓" tabindex="-1"><a class="header-anchor" href="#解题思路-1-python-数组手搓"><span>解题思路 1：Python 数组手搓</span></a></h4><p>难点在于 row_pointer 的理解，它的 length = row + 1，最后一个元素表示 values 的总长度。以示例 1 的输入输出讲解：</p><ol><li>第 0 行的起始位置必然是零，因为它是最开始。</li><li>第 1 行的起始位置是 1，因为上一行（第 0 行）有 1 个非零元素。0+1=1</li><li>第 2 行的起始位置是 3，因为上一行（第 1 行）有 2 个非零元素。1+2=3</li><li>最后一个元素表示 values 的总长度，5-3=2，说明第 2 行有 2 个非零元素。</li></ol><p>从 values 数组切片提取，并用 column_indices 数组还原的角度来看：</p><ol><li>第 0 行元素是 values[0:1]，1 个值，从 column_indices 取 1，还原到 M[0][0]，</li><li>第 1 行元素是 values[1:3]，2 个值，从 column_indices 取 2，还原到 M[1][0]，M[1][1]</li><li>第 2 行元素是 values[3:5]，2 个值，从 column_indices 取 2，还原到 M[2][1]，M[2][2]</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">compressed_row_sparse_matrix</span><span class="token punctuation">(</span>dense_matrix<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    row <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dense_matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    col <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dense_matrix<span class="token punctuation">)</span></span>
<span class="line">    vals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    col_idx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    row_ptr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    temp <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">if</span> dense_matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">                vals<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dense_matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">                col_idx<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span></span>
<span class="line">                temp <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">        row_ptr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> vals<span class="token punctuation">,</span> col_idx<span class="token punctuation">,</span> row_ptr</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解题思路-2-numpy-scipy" tabindex="-1"><a class="header-anchor" href="#解题思路-2-numpy-scipy"><span>解题思路 2：Numpy + SciPy</span></a></h4><p>NumPy 本身不直接提供 CSR 类型，但是 SciPy 的 sparse 模块 提供了完整的 CSR 支持，而且操作很方便。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>sparse <span class="token keyword">import</span> csr_matrix</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">compressed_row_sparse_matrix</span><span class="token punctuation">(</span>dense_matrix<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    A <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>dense_matrix<span class="token punctuation">)</span></span>
<span class="line">    csr <span class="token operator">=</span> csr_matrix<span class="token punctuation">(</span>A<span class="token punctuation">)</span></span>
<span class="line">    vals <span class="token operator">=</span> csr<span class="token punctuation">.</span>data<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    col_idx <span class="token operator">=</span> csr<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    row_ptr <span class="token operator">=</span> csr<span class="token punctuation">.</span>indptr<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> vals<span class="token punctuation">,</span> col_idx<span class="token punctuation">,</span> row_ptr</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10))])}const b=i(k,[["render",d]]),_=JSON.parse('{"path":"/blogs/CodeExam/AI/LinearAlgebra/LA9.html","title":"LA9.实现压缩行稀疏矩阵（CSR）格式转换","lang":"en-US","frontmatter":{"title":"LA9.实现压缩行稀疏矩阵（CSR）格式转换","date":"2025/09/29","categories":["每日一题"],"tags":["AI题库","线性代数"]},"headers":[],"git":{"createdTime":1759087649000,"updatedTime":1759087649000,"contributors":[{"name":"zjk","email":"1213860588@qq.com","commits":1}]},"filePathRelative":"blogs/CodeExam/AI/LinearAlgebra/LA9.md"}');export{b as comp,_ as data};
