import{_ as s,c as a,a as p,o as t}from"./app-Ccl-ihA3.js";const e={};function c(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h3 id="_3-4-识别与裁剪" tabindex="-1"><a class="header-anchor" href="#_3-4-识别与裁剪"><span>3.4 识别与裁剪</span></a></h3><p>在 “中心裁剪” 的时候已经说过，裁剪的核心是<mark>对图像的像素数组（numpy 数组）进行切片操作</mark>。图像是由一个一个的像素点组成的，单通道灰度图只有一个二维数组，RGB 三通道拆分开，就是三个这样的二维数组。</p><p><strong>前面使用 OpenCV 的函数，对图像进行旋转、翻转、裁剪，本质上都是对像素点进行操作。P.S. 小实验：可以自己尝试用 Python 和 Numpy，手写对图像进行水平翻转的函数。</strong></p><p>（3）<mark>自动检测特定部位并裁剪</mark>。OpenCV 提供内置的人脸检测器（Haar 级联分类器），可以自动识别人脸位置并进行裁剪。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> cv2</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 加载 Haar 人脸检测器</span></span>
<span class="line">face_cascade <span class="token operator">=</span> cv2<span class="token punctuation">.</span>CascadeClassifier<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>data<span class="token punctuation">.</span>haarcascades <span class="token operator">+</span> <span class="token string">&#39;haarcascade_frontalface_default.xml&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 加载图像</span></span>
<span class="line">img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;img_process_0/lena.png&#39;</span><span class="token punctuation">)</span></span>
<span class="line">gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>  <span class="token comment"># 转为灰度图提高检测精度</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 检测人脸</span></span>
<span class="line">faces <span class="token operator">=</span> face_cascade<span class="token punctuation">.</span>detectMultiScale<span class="token punctuation">(</span>gray<span class="token punctuation">,</span> scaleFactor<span class="token operator">=</span><span class="token number">1.1</span><span class="token punctuation">,</span> minNeighbors<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> minSize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 遍历检测到的人脸</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token keyword">in</span> faces<span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 绘制人脸矩形框</span></span>
<span class="line">    cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> w<span class="token punctuation">,</span> y <span class="token operator">+</span> h<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 裁剪人脸</span></span>
<span class="line">    face_crop <span class="token operator">=</span> img<span class="token punctuation">[</span>y<span class="token punctuation">:</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span> x<span class="token punctuation">:</span>x<span class="token operator">+</span>w<span class="token punctuation">]</span></span>
<span class="line">    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">&#39;Cropped Face&#39;</span><span class="token punctuation">,</span> face_crop<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 显示原图</span></span>
<span class="line">cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">&#39;Detected Faces&#39;</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span></span>
<span class="line">cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面有个很有意思的事情，在加载 Haar 人脸检测器的函数中，有一个文件叫做：haarcascade_frontalface_default.xml。</p><p>在 Python 中，OpenCV 所对应的常用模型文件，是直接打包在库的安装路径中的，可以通过 cv2.data.haarcascades 动态获取这些文件所在的目录，无需手动下载或管理文件路径。</p><p>但是在 C++里，必须手动下载 Haar 特征分类器模型，将其存放在项目目录或指定路径下，然后手动提供该路径。</p><p><strong>detectMultiScale 方法是 OpenCV Haar 特征分类器的核心函数，用于检测人脸或其他目标</strong>，具体的参数这里就不细讲了，关于特征检测，特征提取这方面的内容，会在之后的章节讲到。</p>`,9)]))}const i=s(e,[["render",c]]),u=JSON.parse('{"path":"/series/ComputerVision/TargetDetection/01_zongshu.html","title":"api","lang":"en-US","frontmatter":{"title":"api","date":"2020/05/29"},"headers":[{"level":3,"title":"3.4 识别与裁剪","slug":"_3-4-识别与裁剪","link":"#_3-4-识别与裁剪","children":[]}],"git":{},"filePathRelative":"series/ComputerVision/TargetDetection/01_综述.md"}');export{i as comp,u as data};
