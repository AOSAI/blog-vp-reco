import{_ as e,c as l,b as s,a as i,d as t,e as p,r as o,o as c}from"./app-Ccl-ihA3.js";const r="/matplotlib&numpy/plt-00-01.png",u="/matplotlib&numpy/plt-00-02.png",d="/matplotlib&numpy/plt-00-04.png",k="/matplotlib&numpy/plt-00-05.png",m={},g={href:"https://www.matplotlib.org.cn/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://blog.csdn.net/u010021014/article/details/110393223",target:"_blank",rel:"noopener noreferrer"},x={href:"https://zhuanlan.zhihu.com/p/399679043",target:"_blank",rel:"noopener noreferrer"},v={href:"https://zhuanlan.zhihu.com/p/342422162",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.matplotlib.org.cn/",target:"_blank",rel:"noopener noreferrer"};function f(y,n){const a=o("ExternalLinkIcon");return c(),l("div",null,[n[5]||(n[5]=s("h2",{id:"_1-列阵在前",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-列阵在前"},[s("span",null,"1. 列阵在前")])],-1)),n[6]||(n[6]=s("p",null,"Matplotlib 是 Python 的一个绘图库，与 Numpy、Pandas 共享数据科学三剑客的美誉，也是很多高级可视化库的基础。但它并不是 Python 的内置库，需要手动下载，并且它依赖于 Numpy 库，因此如果遇到看不懂的地方，可以翻一翻 Numpy 的内容。",-1)),n[7]||(n[7]=s("p",null,"虽然在机器学习中用到的只是其中的 pyplot 这样一个子库，但其实它在运行的过程中，内部调用了 Matplotlib 路径下的大部分子模块，共同完成各种丰富的绘图功能。在学习的过程中我觉得还蛮有意思的，从中学时代数学的各种函数图像手绘画图，到现在用代码绘图，也算是一种学习的乐趣。",-1)),n[8]||(n[8]=s("p",null,"在吴恩达教授的课程中，绘图的方式经常有变化，其中还有一些参数的设定，经常会有简写的情况，我就想查阅一下文档到底是怎么设定的，奈何即便是 Matplotlib 的中文网站，也都是引用的英文文档链接，所以就自己记录一下吧。愿我早日脱离菜鸟称号。",-1)),s("p",null,[s("a",g,[n[0]||(n[0]=t("Matplotlib 官方中文文档",-1)),p(a)])]),n[9]||(n[9]=i('<h2 id="_2-api-层次" tabindex="-1"><a class="header-anchor" href="#_2-api-层次"><span>2. API 层次</span></a></h2><p>Matplotlib 的 API 包含有三层：</p><ul><li>backend_bases.FigureCanvas：简单来说就是画布</li><li>backend_bases.Renderer：知道如何在 FigureCanvas 上绘图</li><li>artist.Artist：知道如何使用 Renderer 在 FigureCanvas 上绘图</li></ul><p>FigureCanvas 和 Renderer 需要处理底层的绘图操作，Artist 则处理所有的高层结构，通常我们只和 Artist 打交道，不需要关心底层的绘制细节。就好比我们的高级编程语言 Java、Python，我们只需要去写我们的逻辑，而不用去考虑如何编译、如何解释执行。</p><p>在 Matplotlib 中最重要的基类是 Artist 类及其派生类，主要分为<strong>绘图容器</strong>和<strong>绘图元素</strong>两种类型：</p><ol><li><p>容器类型中包括：<mark>Figure、Axes、Axis</mark>，这些类确定一个绘图的区域，为元素类型的显示提供位置。</p></li><li><p>元素类型包括：Line2D、Rectangle、Text、AxesImage 等，这些都是包含在容器类型所提供的绘图区域中的。</p></li></ol><h2 id="_3-绘图结构" tabindex="-1"><a class="header-anchor" href="#_3-绘图结构"><span>3. 绘图结构</span></a></h2><figure><img src="'+r+'" alt="绘图结构的图像描述" tabindex="0" loading="lazy"><figcaption>绘图结构的图像描述</figcaption></figure><ul><li><p><strong>Figure：</strong> 红色的外框，可以将其理解为一个画板，我们所有的内容都会绘制在这个画板上，也就是说 Figure 会包含所有的子 Axes。</p></li><li><p><strong>Axes：</strong> 蓝色的内框，一套坐标轴组合，可以理解为是一个子图，就像小孩子爱看的漫画书，一页纸上有一般都六幅画，Axes 的数量可以是一个，也可以是多个。</p></li><li><p><strong>Axis：</strong> 绿色的横纵坐标，上面包含了刻度和标签（tick locations 和 labels）。</p></li></ul><p>Axis 表示坐标轴（x、y、z……），而 Axes 在英文中是 Axis 的复数形式，也就是说 Axes 代表的其实是 Figure 中的一套坐标轴。所以在一个 Figure 当中，每次添加一个 subplot（子图），其实就是添加了一套坐标轴（一个 Axes）。<mark>所以可以看出，ax 的设定一定一个数组，因为子图的数量是可以多个的，所以在多个图的情况下，最好采用 ax.plot() 的绘图方式。如果是一个图，plt.plot() 和 ax.plot() 两种方式效果是一样的。</mark></p><figure><img src="'+u+'" alt="子图样例" width="500" tabindex="0" loading="lazy"><figcaption>子图样例</figcaption></figure><ul><li><strong>Artist：</strong> 是所有绘图元素的基类，在 Figure 中可以被看到的都是一个个 Artist。当一个 figure 被渲染的时候，所有的 artists 都被画在画布 canvas 上。大多数的 artist 都是和某个 axes 绑定的，这些 artist 不能同时属于多个 axes。（因此当一个 figure 里有多个 axes 的时候最好是采用 ax.plot()的方式绘图）</li></ul><h2 id="_4-画布构成图" tabindex="-1"><a class="header-anchor" href="#_4-画布构成图"><span>4. 画布构成图</span></a></h2><p>Figure 是最大的一个 Artist，它包括整幅图像的所有元素，一个 Figure 中的各个部分的 Artists 元素就如下图所示。</p><p>Figure 中的所有元素类型的 Artist 属性都可以通过 ax.set_xxx() 和 ax.get_xxx() 来设置和获取。</p><figure><img src="'+d+'" alt="" width="560" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_5-绘图风格" tabindex="-1"><a class="header-anchor" href="#_5-绘图风格"><span>5. 绘图风格</span></a></h2><p>Matplotlib 在使用的时候有两种风格：面向对象风格（ax）和 pyplot 函数风格。看看同样绘制下方的图例，两种风格的代码有何不同。</p><figure><img src="'+k+`" alt="" width="560" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 面向对象风格</span></span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"></span>
<span class="line">x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># Note that even in the OO-style, we use \`.pyplot.figure\` to create the figure.</span></span>
<span class="line">fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># Create a figure and an axes.</span></span>
<span class="line">ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;linear&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># Plot some data on the axes.</span></span>
<span class="line">ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;quadratic&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># Plot more data on the axes...</span></span>
<span class="line">ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;cubic&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># ... and some more.</span></span>
<span class="line">ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">&#39;x label&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># Add an x-label to the axes.</span></span>
<span class="line">ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">&#39;y label&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># Add a y-label to the axes.</span></span>
<span class="line">ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">&quot;Simple Plot&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># Add a title to the axes.</span></span>
<span class="line">ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># Add a legend.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># pyplot 函数风格</span></span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"></span>
<span class="line">x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;linear&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># Plot some data on the (implicit) axes.</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;quadratic&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># etc.</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;cubic&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">&#39;x label&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">&#39;y label&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&quot;Simple Plot&quot;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两种风格都可以，但是在使用时最好不要混着用。事实上，在调用 plt.plot()、plt.scatter()、plt.bar()等方法时，其实本质上还是在 axes 上画图，可以将他们理解为：先在 figure（画板）上获取一个当前要操作的 axes（坐标系），如果没有 axes 就自动创建一个并将其设为当前的 axes，然后在当前这个 axes 上执行各种绘图功能。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 画布调用的一些小区别</span></span>
<span class="line"></span>
<span class="line">fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># an empty figure with no Axes</span></span>
<span class="line">fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># a figure with a single Axes</span></span>
<span class="line">fig<span class="token punctuation">,</span> axs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># a figure with a 2x2 grid of Axes</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-参考文献" tabindex="-1"><a class="header-anchor" href="#_6-参考文献"><span>6. 参考文献</span></a></h2>`,24)),s("p",null,[s("a",b,[n[1]||(n[1]=t("Matplotlib：绘图结构详解，Artist、Figure、Axes 和 Axis 的联系与区别",-1)),p(a)])]),s("p",null,[s("a",x,[n[2]||(n[2]=t("Matplotlib 使用教程(保姆级说明教程)",-1)),p(a)])]),s("p",null,[s("a",v,[n[3]||(n[3]=t("Matplotlib 入门详细教程",-1)),p(a)])]),s("p",null,[s("a",h,[n[4]||(n[4]=t("Matplotlib 官方中文文档",-1)),p(a)])])])}const A=e(m,[["render",f]]),w=JSON.parse('{"path":"/blogs/intelligence/Matplotlib/","title":"画布结构详解","lang":"en-US","frontmatter":{"title":"画布结构详解","order":0,"author":"AOSAI","date":"2023-11-20T00:00:00.000Z","category":["机器学习"],"tag":["机器学习","Matplotlib"]},"headers":[{"level":2,"title":"1. 列阵在前","slug":"_1-列阵在前","link":"#_1-列阵在前","children":[]},{"level":2,"title":"2. API 层次","slug":"_2-api-层次","link":"#_2-api-层次","children":[]},{"level":2,"title":"3. 绘图结构","slug":"_3-绘图结构","link":"#_3-绘图结构","children":[]},{"level":2,"title":"4. 画布构成图","slug":"_4-画布构成图","link":"#_4-画布构成图","children":[]},{"level":2,"title":"5. 绘图风格","slug":"_5-绘图风格","link":"#_5-绘图风格","children":[]},{"level":2,"title":"6. 参考文献","slug":"_6-参考文献","link":"#_6-参考文献","children":[]}],"git":{},"filePathRelative":"blogs/intelligence/Matplotlib/README.md"}');export{A as comp,w as data};
