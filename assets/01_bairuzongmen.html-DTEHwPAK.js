import{_ as m,c as e,b as s,a as p,e as t,d as a,w as o,r as u,o as l}from"./app-DCqdGVAs.js";const k="/blog-vp-reco/matplotlib&numpy/numpy-01.png",d={},v={href:"https://www.numpy.org.cn/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.numpy.org.cn/reference/routines/array-creation.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html",target:"_blank",rel:"noopener noreferrer"},y={class:"katex"},g={class:"katex-html","aria-hidden":"true"},w={class:"base"},x={class:"mord"},_={class:"mord accent"},f={class:"vlist-t"},M={class:"vlist-r"},z={class:"vlist",style:{height:"0.714em"}},V={style:{top:"-3em"}},H={class:"accent-body",style:{left:"-0.2077em"}},N={class:"overlay",style:{height:"0.714em",width:"0.471em"}},A={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},j={class:"base"},P={class:"mord accent"},B={class:"vlist-t"},S={class:"vlist-r"},L={class:"vlist",style:{height:"0.9774em"}},I={style:{top:"-3.2634em"}},T={class:"accent-body",style:{left:"-0.2355em"}},C={class:"overlay",style:{height:"0.714em",width:"0.471em"}},R={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},q={class:"katex"},Y={class:"katex-html","aria-hidden":"true"},G={class:"base"},E={class:"mord accent"},F={class:"vlist-t"},D={class:"vlist-r"},W={class:"vlist",style:{height:"0.9774em"}},J={style:{top:"-3.2634em"}},O={class:"accent-body",style:{left:"-0.2355em"}},U={class:"overlay",style:{height:"0.714em",width:"0.471em"}},Z={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},K={class:"katex"},Q={class:"katex-html","aria-hidden":"true"},X={class:"base"},$={class:"mord accent"},ss={class:"vlist-t"},ns={class:"vlist-r"},as={class:"vlist",style:{height:"0.714em"}},ps={style:{top:"-3em"}},ts={class:"accent-body",style:{left:"-0.2077em"}},es={class:"overlay",style:{height:"0.714em",width:"0.471em"}},ls={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},cs={class:"katex-block"},os={class:"katex-display"},is={class:"katex"},us={class:"katex-html","aria-hidden":"true"},rs={class:"base"},ms={class:"mord accent"},ks={class:"vlist-t"},ds={class:"vlist-r"},vs={class:"vlist",style:{height:"0.9774em"}},hs={style:{top:"-3.2634em"}},bs={class:"accent-body",style:{left:"-0.2355em"}},ys={class:"overlay",style:{height:"0.714em",width:"0.471em"}},gs={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},ws={href:"https://www.numpy.org.cn/reference/routines/linalg.html",target:"_blank",rel:"noopener noreferrer"};function xs(_s,n){const c=u("ExternalLinkIcon"),i=u("CodeGroupItem"),r=u("CodeGroup");return l(),e("div",null,[n[47]||(n[47]=s("h2",{id:"_1-初入宗门",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-初入宗门"},[s("span",null,"1. 初入宗门")])],-1)),s("p",null,[s("a",v,[n[0]||(n[0]=a("Numpy 官方中文文档",-1)),t(c)])]),n[48]||(n[48]=p(`<h3 id="_1-1-简介" tabindex="-1"><a class="header-anchor" href="#_1-1-简介"><span>1.1 简介</span></a></h3><p>Numpy 是一个功能强大的 Python 库，主要用于对多维数组（矩阵）执行计算。Numpy 这个词来源于两个单词 -- Numerical（数字的、以数字表示的）和 Python。这类数值计算广泛用于以下任务：</p><ul><li><p><strong>机器学习模型：</strong> 在编写机器学习算法时，需要对矩阵进行各种数值计算。例如矩阵乘法、换位、加法等。NumPy 提供了一个非常好的库，用于简单(在编写代码方面)和快速(在速度方面)计算。NumPy 数组用于存储训练数据和机器学习模型的参数。</p></li><li><p><strong>图像处理和计算机图形学：</strong> 计算机中的图像表示为多维数字数组。NumPy 成为同样情况下最自然的选择。实际上，NumPy 提供了一些优秀的库函数来快速处理图像。例如，镜像图像、按特定角度旋转图像等。</p></li><li><p><strong>数学任务：</strong> NumPy 对于执行各种数学任务非常有用，如数值积分、微分、内插、外推等。因此，当涉及到数学任务时，它形成了一种基于 Python 的 MATLAB 的快速替代。</p></li></ul><h3 id="_1-2-安装" tabindex="-1"><a class="header-anchor" href="#_1-2-安装"><span>1.2 安装</span></a></h3><p>情况一：电脑中单独装了 Python，并且配置了相关环境，这时候这样安装。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">pip install numpy</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>情况二：电脑中安装了 Anaconda，并配置了相关环境。再往前不知道，但是 23 年这两次 Anaconda 的库中直接内置了 Numpy 和其相关的库，配置好环境后可以直接查看其版本。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 列出所有安装好的包名</span></span>
<span class="line">pip <span class="token builtin">list</span>  <span class="token comment"># == conda list</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 模糊查询，列出包含 关键词xxx 的所有包名</span></span>
<span class="line">pip <span class="token builtin">list</span> xxx  <span class="token comment"># == conda list xxx</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>情况三：项目需要统一 Python 和 Numpy 库的版本，需要指定版本安装。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># version为需要被指定的版本号</span></span>
<span class="line">pip install numpy<span class="token operator">=</span>version</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-数组基础" tabindex="-1"><a class="header-anchor" href="#_2-数组基础"><span>2. 数组基础</span></a></h2><h3 id="_2-1-创建数组" tabindex="-1"><a class="header-anchor" href="#_2-1-创建数组"><span>2.1 创建数组</span></a></h3><p>在 Numpy 中数组叫做 ndarrays，可能是 n dim array（n 维数组）的意思。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token number">1</span><span class="token operator">-</span>dim <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token number">2</span><span class="token operator">-</span>dim <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token number">3</span><span class="token operator">-</span>dim <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中我们可以看出 Numpy 数组理论上是可以无限嵌套的，它的维度就是嵌套的次数。</p><p>另外，我们还可以把序列传递给 Numpy 中的 array()函数，这个序列不仅仅指的是 Python 中的列表（list），只要是类数组型的数据都可以传递。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line">arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line">arr2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>arr1<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">arr3 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment"># [0,1,2,3,4]</span></span>
<span class="line">arr4 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment"># [0, 1.57079633, 3.14159265, 4.71238898, 6.28318531]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实我最开始很疑惑，为什么 np 中的数组，还要里面加 [] 中括号。最后发现，在 arr1 传递的过程中，它打印出来的列表类型就是 [1，2，3，4，5] 这样子一个状态，所以如果要像 1-dim 一样，直接创建的话，就需要遵循列表性质，加上 [] 。</p><p><strong>arange([start], stop, [step], [dtype])</strong> 就像写了一个 range 的列表推导式，也是序列，所以可以这样生成数组，<u>表示返回给定间隔内的均匀间隔的值</u>，[] 中括号内的表示可以省略的。</p><p><strong>linspace(start, stop, [num], [endpoint], [restep], [dtype])</strong> <u>返回指定间隔内的等间隔数字</u>，因为终点 stop 为 2*np.pi = 6.28，生成的数量 num 为 5，所以解决就如代码注释所示。</p><h3 id="_2-2-数组切片" tabindex="-1"><a class="header-anchor" href="#_2-2-数组切片"><span>2.2 数组切片</span></a></h3><p>我们先看一些 Python 中常见的切片操作：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 从第二个取到最后一个 [2,3,4,5]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 从头截取到第三个 [1,2,3]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 从头到倒数第二个 [1,2,3,4]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 从头截取到第四个，步长为2，[1,3]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 不设开头不设结尾，步长为-1，因此从后往前输出全部，[5,4,3,2,1]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 从下标为二的元素翻转读取，[3,2,1]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们用 Numpy 创建一个二维数组，来进行切片操作：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">              <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">              <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">              <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">              <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 25</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># [12, 13, 14]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># [16, 21, 26]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># [[11, 13, 15],[21, 23, 25],[31, 33, 35]]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># [12, 17, 22, 27, 32]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们选择元素的方式和 Python 相同，a[2，4] 表示选择第 3 行，第 5 列的元素，就是 25。记住<mark>前行后列</mark>这四个字就成。另外数组的索引是从 0 开始的，所以我们说第几行第几列的时候就要 +1，2+1=3，4+1=5，新手易错点。</p><p>切片 n:m 表示从第 n 个索引开始，切取到第 m-1 个索引处。在高级编程语言中，基本上这种有范围限制的，都是前闭后开的，还是索引的原因，假如我们说第 5 个元素是最后一个元素，但是它的索引其实是 4，所以必须要 -1。a[0，1:4] 就表示第一行，截取索引 0~3 的元素，就是 [12，13，14] 。</p><p>如果 : 单独作为占位符使用，就表示<mark>忽略行或列</mark>，因为它完整的样子是 start : end，只有一个冒号时就表示不设起始值，不设结束值。就比如 a[:, 1] 表示忽略行、选择第二列。a[::2, ::2]，行步长为 2，列步长为 2，选择元素。</p><h3 id="_2-3-数组属性" tabindex="-1"><a class="header-anchor" href="#_2-3-数组属性"><span>2.3 数组属性</span></a></h3><p>还是以刚才的二维数组 a 为例，我们看看它的属性有哪些：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 数组类型：&lt;class &#39;numpy.ndarray&#39;&gt;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>  <span class="token comment"># 数据类型：int64</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>size<span class="token punctuation">)</span>  <span class="token comment"># 数组长度：25</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment"># 数组形状：(5, 5)。表示 5行 5列。</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>itemsize<span class="token punctuation">)</span>  <span class="token comment"># 每个元素占用的字节数：8</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span>  <span class="token comment"># 数组维数：2</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>nbytes<span class="token punctuation">)</span>  <span class="token comment"># 数组的所有数据消耗掉的字节数：200</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里要稍微说明一下的是，int64 表示有 64 位，一个字节 8 位，因此一个元素占用 8 个字节。另外 shape 同样也可以表示维数，（x，）这样就表示一维；（x，y）这样表示二维，（x，y，z）这样就表示三维。</p><h2 id="_3-数组进阶" tabindex="-1"><a class="header-anchor" href="#_3-数组进阶"><span>3. 数组进阶</span></a></h2><h3 id="_3-1-创建数组" tabindex="-1"><a class="header-anchor" href="#_3-1-创建数组"><span>3.1 创建数组</span></a></h3><p>进阶的创建数组最常见的就是重塑形状，比如先创建一个 1 维数组，然后给它重塑为 2 维数组、或 3 维数组等等。再有就是比如我们通过随机数函数来创建数组。</p>`,35)),t(r,null,{default:o(()=>[t(i,{title:"重塑二维数组"},{default:o(()=>[...n[1]||(n[1]=[s("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),a(" numpy "),s("span",{class:"token keyword"},"as"),a(" np")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 表示生成一个0到19的一维数组，然后变形为 4 行 5 列的二维数组")]),a(`
`),s("span",{class:"line"},[a("array1 "),s("span",{class:"token operator"},"="),a(" np"),s("span",{class:"token punctuation"},"."),a("arange"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"20"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),a("reshape"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"4"),s("span",{class:"token punctuation"},","),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},")")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# array2 和 array1 是等价的")]),a(`
`),s("span",{class:"line"},[a("array2 "),s("span",{class:"token operator"},"="),a(" np"),s("span",{class:"token punctuation"},"."),a("array"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"["),a(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},","),a("  "),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),a("  "),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},","),a("  "),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},","),a("  "),s("span",{class:"token number"},"4"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},",")]),a(`
`),s("span",{class:"line"},[a("                   "),s("span",{class:"token punctuation"},"["),a(),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},","),a("  "),s("span",{class:"token number"},"6"),s("span",{class:"token punctuation"},","),a("  "),s("span",{class:"token number"},"7"),s("span",{class:"token punctuation"},","),a("  "),s("span",{class:"token number"},"8"),s("span",{class:"token punctuation"},","),a("  "),s("span",{class:"token number"},"9"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},",")]),a(`
`),s("span",{class:"line"},[a("                   "),s("span",{class:"token punctuation"},"["),s("span",{class:"token number"},"10"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"11"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"12"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"13"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"14"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},",")]),a(`
`),s("span",{class:"line"},[a("                   "),s("span",{class:"token punctuation"},"["),s("span",{class:"token number"},"15"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"16"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"17"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"18"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"19"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},")")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])]),_:1}),t(i,{title:"重塑三维数组"},{default:o(()=>[...n[2]||(n[2]=[s("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),a(" numpy "),s("span",{class:"token keyword"},"as"),a(" np")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 表示生成一个 0 到 26 的一维数组，然后将其塑性为 3 × 3 × 3 的三维数组")]),a(`
`),s("span",{class:"line"},[a("array1 "),s("span",{class:"token operator"},"="),a(" np"),s("span",{class:"token punctuation"},"."),a("arange"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"27"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),a("reshape"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},","),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},","),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},")")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# array2 和 array1 是等价的")]),a(`
`),s("span",{class:"line"},[a("array2 "),s("span",{class:"token operator"},"="),a(" np"),s("span",{class:"token punctuation"},"."),a("array"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"["),a(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},","),a("  "),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),a("  "),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token punctuation"},"["),a(),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},","),a("  "),s("span",{class:"token number"},"4"),s("span",{class:"token punctuation"},","),a("  "),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token punctuation"},"["),a(),s("span",{class:"token number"},"6"),s("span",{class:"token punctuation"},","),a("  "),s("span",{class:"token number"},"7"),s("span",{class:"token punctuation"},","),a("  "),s("span",{class:"token number"},"8"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},",")]),a(`
`),s("span",{class:"line"},[a("                   "),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"["),a(),s("span",{class:"token number"},"9"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"10"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"11"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token punctuation"},"["),s("span",{class:"token number"},"12"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"13"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"14"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token punctuation"},"["),s("span",{class:"token number"},"15"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"16"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"17"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},",")]),a(`
`),s("span",{class:"line"},[a("                   "),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"["),s("span",{class:"token number"},"18"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"19"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"20"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token punctuation"},"["),s("span",{class:"token number"},"21"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"22"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"23"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token punctuation"},"["),s("span",{class:"token number"},"24"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"25"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token number"},"26"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},")")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])]),_:1}),t(i,{title:"随机数函数创建数组"},{default:o(()=>[...n[3]||(n[3]=[s("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),a(" numpy "),s("span",{class:"token keyword"},"as"),a(" np")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 表示生成一个 2 × 2 的二维随机数数组，取值范围 [0, 1]")]),a(`
`),s("span",{class:"line"},[a("array "),s("span",{class:"token operator"},"="),a(" np"),s("span",{class:"token punctuation"},"."),a("random"),s("span",{class:"token punctuation"},"."),a("random"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},","),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 因为是随机的，所以每次结果都不一样，这里举个例子")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"print"),s("span",{class:"token punctuation"},"("),a("array"),s("span",{class:"token punctuation"},")")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [[0.1632794 , 0.34567049],")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#  [0.03463241, 0.70687903]]")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])]),_:1})]),_:1}),n[49]||(n[49]=p(`<p>除了变形和随机数，我们还有一些常见的创建、填充数组的函数，比如：</p><ol><li>使用 zeros() 函数创建一个填充 0 的数组，函数的参数表示行数和列数。</li><li>使用 ones() 函数创建一个填充 1 的数组，参数同上。</li><li>empty() 函数创建一个数组，它的初始内容是随机的，取决于内存的状态。</li><li>full() 函数创建一个填充给定值的 n * n 的数组。</li><li>eye() 函数可以创建一个 n * n 的单位矩阵。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"></span>
<span class="line">np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                             <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                            <span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                            <span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.65670626</span><span class="token punctuation">,</span> <span class="token number">0.52097334</span><span class="token punctuation">,</span> <span class="token number">0.99831087</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                             <span class="token punctuation">[</span><span class="token number">0.07280136</span><span class="token punctuation">,</span> <span class="token number">0.4416958</span> <span class="token punctuation">,</span> <span class="token number">0.06185705</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">np<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                               <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                         <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                         <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结一下基础篇和进阶篇，Numpy 创建数组有三种不同的机制：</p><ol><li>从其他 Python 结构（例如，列表，元组）转换</li><li>numpy 原生数组的创建（例如，arange、ones、zeros 等）</li><li>使用特殊库函数（例如，random）</li></ol>`,5)),s("p",null,[n[5]||(n[5]=a("除了列举出来的这些，还有很多创建方式，这里直接给到相关 API：",-1)),s("a",h,[n[4]||(n[4]=a("Numpy 创建数组 API",-1)),t(c)])]),n[50]||(n[50]=p(`<h3 id="_3-2-基本操作符" tabindex="-1"><a class="header-anchor" href="#_3-2-基本操作符"><span>3.2 基本操作符</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">a <span class="token operator">+</span> b <span class="token operator">==</span> np<span class="token punctuation">.</span>add<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>       <span class="token comment"># 对应元素相加</span></span>
<span class="line">a <span class="token operator">-</span> b <span class="token operator">==</span> np<span class="token punctuation">.</span>subtract<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token comment"># 对应元素相减</span></span>
<span class="line">a <span class="token operator">*</span> b <span class="token operator">==</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token comment"># 对应元素相乘</span></span>
<span class="line">a <span class="token operator">/</span> b <span class="token operator">==</span> np<span class="token punctuation">.</span>divide<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token comment"># 对应元素相除</span></span>
<span class="line"></span>
<span class="line">a <span class="token operator">**</span> <span class="token number">2</span>      <span class="token comment"># 元素分别平方</span></span>
<span class="line">a <span class="token operator">&lt;</span> b       <span class="token comment"># 对应元素比较，小于时为真返回 True，大于等于时为假返回 False</span></span>
<span class="line">np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># 元素分别开根号</span></span>
<span class="line">a<span class="token punctuation">.</span>T         <span class="token comment"># 向量转置</span></span>
<span class="line">a<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">==</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dot()函数称为点积，也叫内积。向量内积或者说矩阵内积，必须要满足的条件就是，前一个向量的列数要与后一个向量的行数要对应，否则没有办法相乘。简单的写一下：</p>`,3)),n[51]||(n[51]=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mrow",null,[s("mo",{fence:"true"},"["),s("mtable",{rowspacing:"0.16em",columnalign:"center center center",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"1")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"2")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"3")])])])]),s("mo",{fence:"true"},"]")]),s("mo",null,"⋅"),s("mrow",null,[s("mo",{fence:"true"},"["),s("mtable",{rowspacing:"0.16em",columnalign:"center",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"4")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"5")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"6")])])])]),s("mo",{fence:"true"},"]")]),s("mo",null,"="),s("mn",null,"4"),s("mo",null,"+"),s("mn",null,"10"),s("mo",null,"+"),s("mn",null,"18"),s("mo",null,"="),s("mn",null,"32")]),s("annotation",{encoding:"application/x-tex"},"\\begin{bmatrix} 1 & 2 & 3 \\end{bmatrix} \\cdot \\begin{bmatrix} 4 \\\\ 5 \\\\ 6 \\end{bmatrix} = 4 + 10 + 18 = 32 ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2em","vertical-align":"-0.35em"}}),s("span",{class:"minner"},[s("span",{class:"mopen delimcenter",style:{top:"0em"}},[s("span",{class:"delimsizing size1"},"[")]),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.85em"}},[s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.35em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.85em"}},[s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.35em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.85em"}},[s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"3")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.35em"}},[s("span")])])])])])]),s("span",{class:"mclose delimcenter",style:{top:"0em"}},[s("span",{class:"delimsizing size1"},"]")])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"⋅"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"3.6em","vertical-align":"-1.55em"}}),s("span",{class:"minner"},[s("span",{class:"mopen"},[s("span",{class:"delimsizing mult"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.05em"}},[s("span",{class:"pstrut",style:{height:"5.6em"}}),s("span",{style:{width:"0.667em",height:"3.600em"}},[s("svg",{xmlns:"http://www.w3.org/2000/svg",width:"0.667em",height:"3.600em",viewBox:"0 0 667 3600"},[s("path",{d:`M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84
H403z M403 1759 V0 H319 V1759 v0 v1759 h84z`})])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])])]),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"4")])]),s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"5")])]),s("span",{style:{top:"-1.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"6")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])])])]),s("span",{class:"mclose"},[s("span",{class:"delimsizing mult"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.05em"}},[s("span",{class:"pstrut",style:{height:"5.6em"}}),s("span",{style:{width:"0.667em",height:"3.600em"}},[s("svg",{xmlns:"http://www.w3.org/2000/svg",width:"0.667em",height:"3.600em",viewBox:"0 0 667 3600"},[s("path",{d:`M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347z
M347 1759 V0 H263 V1759 v0 v1759 h84z`})])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"4"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"10"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"18"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"32")])])])])],-1)),n[52]||(n[52]=s("p",null,[a("这里前一个行向量的列数是 3，后一个列向量的行数是 3，"),s("mark",null,"点积的相乘规律就是前行乘后列"),a("，因此相加就等于 32。再看一下反过来的：")],-1)),n[53]||(n[53]=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mrow",null,[s("mo",{fence:"true"},"["),s("mtable",{rowspacing:"0.16em",columnalign:"center",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"4")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"5")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"6")])])])]),s("mo",{fence:"true"},"]")]),s("mo",null,"⋅"),s("mrow",null,[s("mo",{fence:"true"},"["),s("mtable",{rowspacing:"0.16em",columnalign:"center center center",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"1")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"2")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"3")])])])]),s("mo",{fence:"true"},"]")]),s("mo",null,"="),s("mrow",null,[s("mo",{fence:"true"},"["),s("mtable",{rowspacing:"0.16em",columnalign:"center center center",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"4")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"8")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"12")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"5")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"10")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"15")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"6")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"12")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"18")])])])]),s("mo",{fence:"true"},"]")])]),s("annotation",{encoding:"application/x-tex"},"\\begin{bmatrix} 4 \\\\ 5 \\\\ 6 \\end{bmatrix} \\cdot \\begin{bmatrix} 1 & 2 & 3 \\end{bmatrix} = \\begin{bmatrix} 4 & 8 & 12 \\\\ 5 & 10 & 15 \\\\ 6 & 12 & 18 \\end{bmatrix} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"3.6em","vertical-align":"-1.55em"}}),s("span",{class:"minner"},[s("span",{class:"mopen"},[s("span",{class:"delimsizing mult"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.05em"}},[s("span",{class:"pstrut",style:{height:"5.6em"}}),s("span",{style:{width:"0.667em",height:"3.600em"}},[s("svg",{xmlns:"http://www.w3.org/2000/svg",width:"0.667em",height:"3.600em",viewBox:"0 0 667 3600"},[s("path",{d:`M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84
H403z M403 1759 V0 H319 V1759 v0 v1759 h84z`})])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])])]),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"4")])]),s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"5")])]),s("span",{style:{top:"-1.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"6")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])])])]),s("span",{class:"mclose"},[s("span",{class:"delimsizing mult"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.05em"}},[s("span",{class:"pstrut",style:{height:"5.6em"}}),s("span",{style:{width:"0.667em",height:"3.600em"}},[s("svg",{xmlns:"http://www.w3.org/2000/svg",width:"0.667em",height:"3.600em",viewBox:"0 0 667 3600"},[s("path",{d:`M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347z
M347 1759 V0 H263 V1759 v0 v1759 h84z`})])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"⋅"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2em","vertical-align":"-0.35em"}}),s("span",{class:"minner"},[s("span",{class:"mopen delimcenter",style:{top:"0em"}},[s("span",{class:"delimsizing size1"},"[")]),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.85em"}},[s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.35em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.85em"}},[s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.35em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.85em"}},[s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"3")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.35em"}},[s("span")])])])])])]),s("span",{class:"mclose delimcenter",style:{top:"0em"}},[s("span",{class:"delimsizing size1"},"]")])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"3.6em","vertical-align":"-1.55em"}}),s("span",{class:"minner"},[s("span",{class:"mopen"},[s("span",{class:"delimsizing mult"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.05em"}},[s("span",{class:"pstrut",style:{height:"5.6em"}}),s("span",{style:{width:"0.667em",height:"3.600em"}},[s("svg",{xmlns:"http://www.w3.org/2000/svg",width:"0.667em",height:"3.600em",viewBox:"0 0 667 3600"},[s("path",{d:`M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84
H403z M403 1759 V0 H319 V1759 v0 v1759 h84z`})])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])])]),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"4")])]),s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"5")])]),s("span",{style:{top:"-1.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"6")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"8")])]),s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"10")])]),s("span",{style:{top:"-1.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"12")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"12")])]),s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"15")])]),s("span",{style:{top:"-1.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"18")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])])])]),s("span",{class:"mclose"},[s("span",{class:"delimsizing mult"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.05em"}},[s("span",{class:"pstrut",style:{height:"5.6em"}}),s("span",{style:{width:"0.667em",height:"3.600em"}},[s("svg",{xmlns:"http://www.w3.org/2000/svg",width:"0.667em",height:"3.600em",viewBox:"0 0 667 3600"},[s("path",{d:`M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347z
M347 1759 V0 H263 V1759 v0 v1759 h84z`})])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])])])])])])])])],-1)),n[54]||(n[54]=p(`<p>列向量点乘行向量，前行乘后列，就变成了一个矩阵。</p><h3 id="_3-3-特殊运算符" tabindex="-1"><a class="header-anchor" href="#_3-3-特殊运算符"><span>3.3 特殊运算符</span></a></h3><p>除了基本的运算符，Numpy 还提供了一些好用的处理数组的函数。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 数组元素相加：45</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 数组元素中的最小值：0</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 数组元素中的最大值：9</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cumsum() 这个函数很有意思，乍一看很像斐波那契数列，但其实不是，它是从索引 0 开始，走到哪（n），就把 0 到 n 的元素全部累加：</p><ul><li>a[0] = 0</li><li>a[1] = 0 + 1 = 1</li><li>a[2] = 0 + 1 + 2 = 3</li><li>a[3] = 0 + 1 + 2 + 3 = 6</li><li>a[4] = 0 + 1 + 2 + 3 + 4 = 10</li></ul><h2 id="_4-索引进阶" tabindex="-1"><a class="header-anchor" href="#_4-索引进阶"><span>4. 索引进阶</span></a></h2><h3 id="_4-1-花式索引" tabindex="-1"><a class="header-anchor" href="#_4-1-花式索引"><span>4.1 花式索引</span></a></h3><p>它是指我们可以通过数组来存储指定索引，从而获取指定元素的方法。在 Python 中这样是不可行的，只能单独取一个，所以这个操作确实挺花哨的。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># [ 0 10 20 30 40 50 60 70 80 90]</span></span>
<span class="line">indices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment"># indices 表示存储索引为1，5，-1。a[indices] 则是搜索这三个索引的值</span></span>
<span class="line">b <span class="token operator">=</span> a<span class="token punctuation">[</span>indices<span class="token punctuation">]</span></span>
<span class="line"><span class="token comment"># [10 50 90]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-缺省索引-条件选择" tabindex="-1"><a class="header-anchor" href="#_4-2-缺省索引-条件选择"><span>4.2 缺省索引 &amp; 条件选择</span></a></h3><p>缺省索引其实就是切片，这个在基础篇写的很详细。重点是条件选择，这个我在 Python 里确实没见到过，直接这样写条件判断的，说列表推导式吧，也不像，反正记住这个就行了。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># [ 0 10 20 30 40 50 60 70 80 90]</span></span>
<span class="line">b <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line">c <span class="token operator">=</span> a<span class="token punctuation">[</span>a <span class="token operator">&gt;=</span> <span class="token number">50</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment"># &gt;&gt;&gt;[ 0 10 20 30 40]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment"># &gt;&gt;&gt;[50 60 70 80 90]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-where-函数" tabindex="-1"><a class="header-anchor" href="#_4-3-where-函数"><span>4.3 Where 函数</span></a></h3><p>这个比起条件选择来看着更正规一点，同样也是根据条件返回数组中的值的有效方法，唯一要注意的就是他返回的是一个元组，[0] 索引的位置才是返回的列表本体。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># [ 0 10 20 30 40 50 60 70 80 90]</span></span>
<span class="line">b <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line">c <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment"># &gt;&gt;&gt;(array([0, 1, 2, 3, 4]),)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment"># &gt;&gt;&gt;[5 6 7 8 9]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-布尔屏蔽" tabindex="-1"><a class="header-anchor" href="#_4-4-布尔屏蔽"><span>4.4 布尔屏蔽</span></a></h3><p>这里稍微有点朝纲，Matplotlib 具体会另起一个文档编写。不过也不是什么大事儿，学习的过程就是模仿嘛，多看多写就会了。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"></span>
<span class="line">a <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line">b <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>a<span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span></span>
<span class="line">mask <span class="token operator">=</span> b <span class="token operator">&gt;=</span> <span class="token number">0</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>a<span class="token punctuation">[</span>mask<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>mask<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;bo&#39;</span><span class="token punctuation">)</span></span>
<span class="line">mask <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> np<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>a<span class="token punctuation">[</span>mask<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>mask<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;go&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里画了一个图，plot(a, b) 中的 a 就表示横坐标，是 0 到 2Π 的长度，b 表示纵坐标，相当于画了一个 sin(a) 的函数。</p>`,20)),s("p",null,[n[7]||(n[7]=a("mask 是这节的重点，布尔屏蔽，它会根据指定的条件检索数组中的元素。“bo” 和 “go” 这两个缩写词也困扰我好久，翻了文档才知道，b 表示 blue，g 表示 green，o 表示 circle marker。这样一解释，看到出来的图，对应代码就好理解了。",-1)),s("a",b,[n[6]||(n[6]=a("pyplot.plot 的官方文档",-1)),t(c)])]),n[55]||(n[55]=p('<figure><img src="'+k+`" alt="1.1 布尔屏蔽" width="560" tabindex="0" loading="lazy"><figcaption>1.1 布尔屏蔽</figcaption></figure><p>代码中存在两个 mask 屏蔽判断，前一个是要 y &gt; 0，蓝色的圆点表示，第二个是在第一个的基础上，还要 x &lt; Π/2，绿色圆点表示，我们可以看到后一个的绿色把前一个蓝色是覆盖掉了的。</p><h2 id="_5-矩阵和向量" tabindex="-1"><a class="header-anchor" href="#_5-矩阵和向量"><span>5. 矩阵和向量</span></a></h2><h3 id="_5-1-向量的构建" tabindex="-1"><a class="header-anchor" href="#_5-1-向量的构建"><span>5.1 向量的构建</span></a></h3><p>一般情况下，我们说的向量都是列向量。最简单的构建思路就是，二维数组，每行元素就一个：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">v1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>但是这样写，如果数量太多了，就很麻烦，更方便的方法是转置相应的行向量，两种写法：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">v1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">v2 <span class="token operator">=</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>v1<span class="token punctuation">)</span></span>
<span class="line">v3 <span class="token operator">=</span> v1<span class="token punctuation">.</span>T</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>向量的内积运算以及切片等操作前边已经讲过了，这里不赘述了。</p><h3 id="_5-2-求解方程组" tabindex="-1"><a class="header-anchor" href="#_5-2-求解方程组"><span>5.2 求解方程组</span></a></h3>`,10)),s("p",null,[n[31]||(n[31]=a("线性代数中常见问题之一就是求解矩阵向量方程：",-1)),s("span",y,[n[20]||(n[20]=p('<span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>⋅</mo><mover accent="true"><mi>x</mi><mo>⃗</mo></mover><mo>=</mo><mover accent="true"><mi>b</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">A\\cdot{\\vec{x}}=\\vec{b}</annotation></semantics></math></span>',1)),s("span",g,[n[19]||(n[19]=p('<span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span>',1)),s("span",w,[n[11]||(n[11]=s("span",{class:"strut",style:{height:"0.714em"}},null,-1)),s("span",x,[s("span",_,[s("span",f,[s("span",M,[s("span",z,[n[10]||(n[10]=s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord mathnormal"},"x")],-1)),s("span",V,[n[9]||(n[9]=s("span",{class:"pstrut",style:{height:"3em"}},null,-1)),s("span",H,[s("span",N,[(l(),e("svg",A,[...n[8]||(n[8]=[s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1)])]))])])])])])])])]),n[12]||(n[12]=s("span",{class:"mspace",style:{"margin-right":"0.2778em"}},null,-1)),n[13]||(n[13]=s("span",{class:"mrel"},"=",-1)),n[14]||(n[14]=s("span",{class:"mspace",style:{"margin-right":"0.2778em"}},null,-1))]),s("span",j,[n[18]||(n[18]=s("span",{class:"strut",style:{height:"0.9774em"}},null,-1)),s("span",P,[s("span",B,[s("span",S,[s("span",L,[n[17]||(n[17]=s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord mathnormal"},"b")],-1)),s("span",I,[n[16]||(n[16]=s("span",{class:"pstrut",style:{height:"3em"}},null,-1)),s("span",T,[s("span",C,[(l(),e("svg",R,[...n[15]||(n[15]=[s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1)])]))])])])])])])])])])]),n[32]||(n[32]=p('，当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 和 ',3)),s("span",q,[n[25]||(n[25]=s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mi",null,"b"),s("mo",null,"⃗")])]),s("annotation",{encoding:"application/x-tex"},"\\vec{b}")])])],-1)),s("span",Y,[s("span",G,[n[24]||(n[24]=s("span",{class:"strut",style:{height:"0.9774em"}},null,-1)),s("span",E,[s("span",F,[s("span",D,[s("span",W,[n[23]||(n[23]=s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord mathnormal"},"b")],-1)),s("span",J,[n[22]||(n[22]=s("span",{class:"pstrut",style:{height:"3em"}},null,-1)),s("span",O,[s("span",U,[(l(),e("svg",Z,[...n[21]||(n[21]=[s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1)])]))])])])])])])])])])]),n[33]||(n[33]=a(" 等于如下值时，求解 ",-1)),s("span",K,[n[30]||(n[30]=s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mi",null,"x"),s("mo",null,"⃗")])]),s("annotation",{encoding:"application/x-tex"},"\\vec{x}")])])],-1)),s("span",Q,[s("span",X,[n[29]||(n[29]=s("span",{class:"strut",style:{height:"0.714em"}},null,-1)),s("span",$,[s("span",ss,[s("span",ns,[s("span",as,[n[28]||(n[28]=s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord mathnormal"},"x")],-1)),s("span",ps,[n[27]||(n[27]=s("span",{class:"pstrut",style:{height:"3em"}},null,-1)),s("span",ts,[s("span",es,[(l(),e("svg",ls,[...n[26]||(n[26]=[s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1)])]))])])])])])])])])])]),n[34]||(n[34]=a("：",-1))]),s("p",cs,[s("span",os,[s("span",is,[n[44]||(n[44]=s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A"),s("mo",null,"="),s("mrow",null,[s("mo",{fence:"true"},"["),s("mtable",{rowspacing:"0.16em",columnalign:"center center center",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"2")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"1")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mo",null,"−"),s("mn",null,"2")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"3")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"0")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"1")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"1")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"1")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mo",null,"−"),s("mn",null,"1")])])])])]),s("mo",{fence:"true"},"]")]),s("mspace",{width:"2em"}),s("mover",{accent:"true"},[s("mi",null,"b"),s("mo",null,"⃗")]),s("mo",null,"="),s("mrow",null,[s("mo",{fence:"true"},"["),s("mtable",{rowspacing:"0.16em",columnalign:"center",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mo",null,"−"),s("mn",null,"3")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"5")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mo",null,"−"),s("mn",null,"2")])])])])]),s("mo",{fence:"true"},"]")])]),s("annotation",{encoding:"application/x-tex"},"A=\\begin{bmatrix} 2&1&-2 \\\\ 3&0&1 \\\\ 1&1&-1 \\end{bmatrix} \\qquad \\vec{b}=\\begin{bmatrix} -3 \\\\ 5 \\\\ -2 \\end{bmatrix} ")])])],-1)),s("span",us,[n[42]||(n[42]=p('<span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span>',1)),s("span",rs,[n[38]||(n[38]=p(`<span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewBox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84
H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">2</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewBox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347z
M347 1759 V0 H263 V1759 v0 v1759 h84z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:0.1667em;"></span>`,4)),s("span",ms,[s("span",ks,[s("span",ds,[s("span",vs,[n[37]||(n[37]=s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord mathnormal"},"b")],-1)),s("span",hs,[n[36]||(n[36]=s("span",{class:"pstrut",style:{height:"3em"}},null,-1)),s("span",bs,[s("span",ys,[(l(),e("svg",gs,[...n[35]||(n[35]=[s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1)])]))])])])])])])]),n[39]||(n[39]=s("span",{class:"mspace",style:{"margin-right":"0.2778em"}},null,-1)),n[40]||(n[40]=s("span",{class:"mrel"},"=",-1)),n[41]||(n[41]=s("span",{class:"mspace",style:{"margin-right":"0.2778em"}},null,-1))]),n[43]||(n[43]=p(`<span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewBox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84
H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">3</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewBox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347z
M347 1759 V0 H263 V1759 v0 v1759 h84z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span>`,1))])])])]),n[56]||(n[56]=p(`<div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 先构建 A 和 b 的数组</span></span>
<span class="line">A <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">b <span class="token operator">=</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 求解</span></span>
<span class="line">x <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>solve<span class="token punctuation">(</span>A<span class="token punctuation">,</span>b<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[46]||(n[46]=a("除了求解方程组，还有很多其他线性代数相关的函数，这里附上 API 链接：",-1)),s("a",ws,[n[45]||(n[45]=a("线性代数 numpy.linalg 相关 API",-1)),t(c)])]),n[57]||(n[57]=p(`<h3 id="_5-3-广播" tabindex="-1"><a class="header-anchor" href="#_5-3-广播"><span>5.3 广播</span></a></h3><p>广播是一种强大的<mark>机制</mark>，它允许 numpy 在执行算术运算时使用不同形状的数组。这个听起来很高端，但是写起来很简单。我们举个例子，假设我们有 1 个矩阵和 1 个向量，矩阵 x 有 4 行 3 列，向量 v 是一个行向量，如下代码表示：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line">x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">v <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们如果要向矩阵 x 的每一行都加上一个向量 v，该怎么做？</p><ol><li>如果是原始 Python，我想大概就是循环操作。</li><li>Numpy 有一种方法可以将向量复制扩充变成矩阵，这样就成了矩阵加法。</li><li>直接利用广播机制，进行相加。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 循环累加</span></span>
<span class="line">y <span class="token operator">=</span> np<span class="token punctuation">.</span>empty_like<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># 创建一个和 x 一样的新矩阵</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    y<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> v</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 扩充向量成矩阵</span></span>
<span class="line">vv <span class="token operator">=</span> np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">y <span class="token operator">=</span> x <span class="token operator">+</span> vv</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 利用广播机制</span></span>
<span class="line">y <span class="token operator">=</span> x <span class="token operator">+</span> v</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>np.tile(A, reps)：</strong> 只有两个参数，第一个参数 A 就是要进行复制的原始向量，也就是输入，要注意的是第二个参数，如果直接写数字的话，就是 1 维扩充，三个元素的行向量变成了六个元素的行向量，而（x，y，z……）的这种形式，就好像 shape，你要告诉它扩充成什么形状的。</p><p>广播机制就是你直接用加法，它的底层逻辑自动帮你扩充成相同的形状。当然了，扩充也是有规则约束的：</p><ol><li>如果数组不具有相同的 rank，则将较低等级数组的形状添加 1，直到两个形状具有相同的长度。</li><li>如果两个数组在维度上具有相同的大小，或者如果其中一个数组在该维度中的大小为 1，则称这两个数组在维度上是兼容的。</li><li>如果数组在所有维度上兼容，则可以一起广播。</li><li>广播之后，每个数组的行为就好像它的形状等于两个输入数组的形状的元素最大值。</li><li>在一个数组的大小为 1 且另一个数组的大小大于 1 的任何维度中，第一个数组的行为就像沿着该维度复制一样</li></ol>`,9))])}const Ms=m(d,[["render",xs]]),zs=JSON.parse('{"path":"/blogs/DataFoundry/Numpy/01_bairuzongmen.html","title":"Numpy之拜入宗门","lang":"en-US","frontmatter":{"title":"Numpy之拜入宗门","date":"2023-11-13T00:00:00.000Z","categories":["数据锻造坊"],"tags":["机器学习","Numpy"]},"headers":[{"level":2,"title":"1. 初入宗门","slug":"_1-初入宗门","link":"#_1-初入宗门","children":[{"level":3,"title":"1.1 简介","slug":"_1-1-简介","link":"#_1-1-简介","children":[]},{"level":3,"title":"1.2 安装","slug":"_1-2-安装","link":"#_1-2-安装","children":[]}]},{"level":2,"title":"2. 数组基础","slug":"_2-数组基础","link":"#_2-数组基础","children":[{"level":3,"title":"2.1 创建数组","slug":"_2-1-创建数组","link":"#_2-1-创建数组","children":[]},{"level":3,"title":"2.2 数组切片","slug":"_2-2-数组切片","link":"#_2-2-数组切片","children":[]},{"level":3,"title":"2.3 数组属性","slug":"_2-3-数组属性","link":"#_2-3-数组属性","children":[]}]},{"level":2,"title":"3. 数组进阶","slug":"_3-数组进阶","link":"#_3-数组进阶","children":[{"level":3,"title":"3.1 创建数组","slug":"_3-1-创建数组","link":"#_3-1-创建数组","children":[]},{"level":3,"title":"3.2 基本操作符","slug":"_3-2-基本操作符","link":"#_3-2-基本操作符","children":[]},{"level":3,"title":"3.3 特殊运算符","slug":"_3-3-特殊运算符","link":"#_3-3-特殊运算符","children":[]}]},{"level":2,"title":"4. 索引进阶","slug":"_4-索引进阶","link":"#_4-索引进阶","children":[{"level":3,"title":"4.1 花式索引","slug":"_4-1-花式索引","link":"#_4-1-花式索引","children":[]},{"level":3,"title":"4.2 缺省索引 & 条件选择","slug":"_4-2-缺省索引-条件选择","link":"#_4-2-缺省索引-条件选择","children":[]},{"level":3,"title":"4.3 Where 函数","slug":"_4-3-where-函数","link":"#_4-3-where-函数","children":[]},{"level":3,"title":"4.4 布尔屏蔽","slug":"_4-4-布尔屏蔽","link":"#_4-4-布尔屏蔽","children":[]}]},{"level":2,"title":"5. 矩阵和向量","slug":"_5-矩阵和向量","link":"#_5-矩阵和向量","children":[{"level":3,"title":"5.1 向量的构建","slug":"_5-1-向量的构建","link":"#_5-1-向量的构建","children":[]},{"level":3,"title":"5.2 求解方程组","slug":"_5-2-求解方程组","link":"#_5-2-求解方程组","children":[]},{"level":3,"title":"5.3 广播","slug":"_5-3-广播","link":"#_5-3-广播","children":[]}]}],"git":{"createdTime":1757688790000,"updatedTime":1758475598000,"contributors":[{"name":"zjk","email":"1213860588@qq.com","commits":2}]},"filePathRelative":"blogs/DataFoundry/Numpy/01_拜入宗门.md"}');export{Ms as comp,zs as data};
