import{_ as r,c as i,a as o,e as t,b as n,w as e,r as u,o as p,d as s}from"./app-DCqdGVAs.js";const k={},m={class:"katex-block"},d={class:"katex-display"},v={class:"katex"},b={class:"katex-html","aria-hidden":"true"},y={class:"base"},h={class:"mord"},g={class:"mfrac"},w={class:"vlist-t vlist-t2"},f={class:"vlist-r"},_={class:"vlist",style:{height:"1.6433em"}},x={style:{top:"-2.1437em"}},A={class:"mord"},B={class:"mord accent"},L={class:"vlist-t"},M={class:"vlist-r"},S={class:"vlist",style:{height:"0.9663em"}},C={style:{top:"-3.2523em"}},j={class:"accent-body",style:{left:"-0.0966em"}},N={class:"overlay",style:{height:"0.714em",width:"0.471em"}},q={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},V={class:"mord accent"},I={class:"vlist-t"},E={class:"vlist-r"},R={class:"vlist",style:{height:"0.9663em"}},F={style:{top:"-3.2523em"}},H={class:"accent-body",style:{left:"-0.1522em"}},J={class:"overlay",style:{height:"0.714em",width:"0.471em"}},z={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},G={style:{top:"-3.677em"}},K={class:"mord"},P={class:"mord accent"},Y={class:"vlist-t"},D={class:"vlist-r"},T={class:"vlist",style:{height:"0.9663em"}},O={style:{top:"-3.2523em"}},U={class:"accent-body",style:{left:"-0.0966em"}},Q={class:"overlay",style:{height:"0.714em",width:"0.471em"}},W={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},X={class:"mord"},Z={class:"mord accent"},$={class:"vlist-t"},nn={class:"vlist-r"},sn={class:"vlist",style:{height:"0.9663em"}},an={style:{top:"-3.2523em"}},tn={class:"accent-body",style:{left:"-0.1522em"}},en={class:"overlay",style:{height:"0.714em",width:"0.471em"}},ln={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"};function on(pn,a){const l=u("CodeGroupItem"),c=u("CodeGroup");return p(),i("div",null,[a[36]||(a[36]=o('<h4 id="难度-简单" tabindex="-1"><a class="header-anchor" href="#难度-简单"><span>难度：简单</span></a></h4><p>实现一个函数来计算两个向量之间的余弦相似度。余弦相似度是通过测量两个向量之间的夹角的余弦值来度量它们之间的相似性。</p><ul><li><strong>输入描述</strong>： <ol><li>第一行为向量 v1，可以是一维或二维数组</li><li>第二行为向量 v2，维度需要与 v1 相同</li></ol></li><li><strong>输出描述</strong>：输出一个浮点数，表示两个向量之间的余弦相似度，结果保留 3 位小数。</li></ul>',3)),t(c,null,{default:e(()=>[t(l,{title:"代码框架"},{default:e(()=>[...a[0]||(a[0]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(" numpy "),n("span",{class:"token keyword"},"as"),s(" np")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"cosine_similarity"),n("span",{class:"token punctuation"},"("),s("v1"),n("span",{class:"token punctuation"},","),s(" v2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("	"),n("span",{class:"token comment"},"# Implement your code here")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token builtin"},"round"),n("span",{class:"token punctuation"},"("),s("val"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"if"),s(" __name__ "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},'"__main__"'),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    v1 "),n("span",{class:"token operator"},"="),s(" np"),n("span",{class:"token punctuation"},"."),s("array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"eval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    v2 "),n("span",{class:"token operator"},"="),s(" np"),n("span",{class:"token punctuation"},"."),s("array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"eval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("cosine_similarity"),n("span",{class:"token punctuation"},"("),s("v1"),n("span",{class:"token punctuation"},","),s(" v2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1}),t(l,{title:"示例 1"},{default:e(()=>[...a[1]||(a[1]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 输入：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 输出：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token number"},"0.975")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1})]),_:1}),a[37]||(a[37]=o('<hr><h4 id="衡量相关性-相似度的指标" tabindex="-1"><a class="header-anchor" href="#衡量相关性-相似度的指标"><span>衡量相关性/相似度的指标</span></a></h4><ol><li>空间向量类：</li></ol><ul><li>欧氏距离 (Euclidean distance)：衡量几何直线距离，越小越相似。</li><li>曼哈顿距离 (Manhattan / L1 distance)：绝对值差的和，适合稀疏特征。</li><li>切比雪夫距离 (Chebyshev distance)：看坐标差的最大值。</li><li>闵可夫斯基距离 (Minkowski distance)：欧氏/曼哈顿的推广。</li><li><mark>马氏距离 (Mahalanobis distance)</mark>：欧氏距离的协方差加权版，能考虑特征的尺度和相关性。</li><li><mark>汉明距离 (Hamming distance)</mark>：曼哈顿距离的离散特例（仅对 0/1 向量）。</li></ul><ol start="2"><li>相似度类（归一化后）：</li></ol><ul><li>点积 (Dot product)：没有归一化的余弦相似度，会受向量长度影响。</li><li><mark>余弦相似度 (Cosine similarity)</mark>：基于夹角，等价于归一化点积。</li><li>雅卡尔相似度 (Jaccard similarity)：常用于集合，但向量（特别是二值向量）也可用。</li><li>Dice 系数 (Sørensen–Dice coefficient)：类似 Jaccard，用于比较重叠度。</li></ul><ol start="3"><li>统计相关性类：</li></ol><ul><li>皮尔逊相关系数 (Pearson correlation coefficient)：衡量线性相关，范围 -1 ~ 1。</li><li>斯皮尔曼等级相关系数 (Spearman rank correlation)：非线性单调关系也能捕捉。</li><li>肯德尔相关系数 (Kendall’s tau)：基于排序一致性。</li></ul><ol start="4"><li>信息论类：</li></ol><ul><li>KL 散度 (Kullback–Leibler divergence)：衡量两个分布的差异（非对称）。</li><li>JS 散度 (Jensen–Shannon divergence)：对称的 KL 变体，更常用。</li><li>互信息 (Mutual Information)：衡量共享信息量。</li></ul><h4 id="余弦相似度" tabindex="-1"><a class="header-anchor" href="#余弦相似度"><span>余弦相似度</span></a></h4><p><mark>余弦相似度（Cosine Similarity）</mark> 是一种用于度量两个向量之间相似性的方法，通常在多维空间中使用。它衡量了两个向量之间夹角的余弦值，从而提供了一种评估它们之间关系的方式。数学计算公式如下：</p>',12)),n("p",m,[n("span",d,[n("span",v,[a[29]||(a[29]=o('<span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Cosine Similarity</mtext><mo stretchy="false">(</mo><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mover accent="true"><mi>A</mi><mo>⃗</mo></mover><mo>⋅</mo><mover accent="true"><mi>B</mi><mo>⃗</mo></mover></mrow><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mover accent="true"><mi>A</mi><mo>⃗</mo></mover><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mover accent="true"><mi>B</mi><mo>⃗</mo></mover><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\\text{Cosine Similarity}(A,B) = \\frac{\\vec{A}\\cdot{\\vec{B}}}{||\\vec{A}||+||\\vec{B}||} </annotation></semantics></math></span>',1)),n("span",b,[a[28]||(a[28]=o('<span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">Cosine Similarity</span></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span>',1)),n("span",y,[a[27]||(a[27]=n("span",{class:"strut",style:{height:"2.7497em","vertical-align":"-1.1063em"}},null,-1)),n("span",h,[a[25]||(a[25]=n("span",{class:"mopen nulldelimiter"},null,-1)),n("span",g,[n("span",w,[n("span",f,[n("span",_,[n("span",x,[a[11]||(a[11]=n("span",{class:"pstrut",style:{height:"3em"}},null,-1)),n("span",A,[a[8]||(a[8]=n("span",{class:"mord"},"∣∣",-1)),n("span",B,[n("span",L,[n("span",M,[n("span",S,[a[4]||(a[4]=n("span",{style:{top:"-3em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord mathnormal"},"A")],-1)),n("span",C,[a[3]||(a[3]=n("span",{class:"pstrut",style:{height:"3em"}},null,-1)),n("span",j,[n("span",N,[(p(),i("svg",q,[...a[2]||(a[2]=[n("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1)])]))])])])])])])]),a[9]||(a[9]=o('<span class="mord">∣∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">∣∣</span>',5)),n("span",V,[n("span",I,[n("span",E,[n("span",R,[a[7]||(a[7]=n("span",{style:{top:"-3em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B")],-1)),n("span",F,[a[6]||(a[6]=n("span",{class:"pstrut",style:{height:"3em"}},null,-1)),n("span",H,[n("span",J,[(p(),i("svg",z,[...a[5]||(a[5]=[n("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1)])]))])])])])])])]),a[10]||(a[10]=n("span",{class:"mord"},"∣∣",-1))])]),a[22]||(a[22]=n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})],-1)),n("span",G,[a[21]||(a[21]=n("span",{class:"pstrut",style:{height:"3em"}},null,-1)),n("span",K,[n("span",P,[n("span",Y,[n("span",D,[n("span",T,[a[14]||(a[14]=n("span",{style:{top:"-3em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord mathnormal"},"A")],-1)),n("span",O,[a[13]||(a[13]=n("span",{class:"pstrut",style:{height:"3em"}},null,-1)),n("span",U,[n("span",Q,[(p(),i("svg",W,[...a[12]||(a[12]=[n("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1)])]))])])])])])])]),a[18]||(a[18]=n("span",{class:"mspace",style:{"margin-right":"0.2222em"}},null,-1)),a[19]||(a[19]=n("span",{class:"mbin"},"⋅",-1)),a[20]||(a[20]=n("span",{class:"mspace",style:{"margin-right":"0.2222em"}},null,-1)),n("span",X,[n("span",Z,[n("span",$,[n("span",nn,[n("span",sn,[a[17]||(a[17]=n("span",{style:{top:"-3em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B")],-1)),n("span",an,[a[16]||(a[16]=n("span",{class:"pstrut",style:{height:"3em"}},null,-1)),n("span",tn,[n("span",en,[(p(),i("svg",ln,[...a[15]||(a[15]=[n("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1)])]))])])])])])])])])])])]),a[23]||(a[23]=n("span",{class:"vlist-s"},"​",-1))]),a[24]||(a[24]=n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.1063em"}},[n("span")])],-1))])]),a[26]||(a[26]=n("span",{class:"mclose nulldelimiter"},null,-1))])])])])])]),a[38]||(a[38]=o(`<p>其中，A 和 B 是要比较的向量；||A|| 与 ||B|| 表示向量的模长，通过计算每个向量元素的平方和，然后取平方根得到。之所以说它是归一化的向量点积，因为它除以了自己的模长，让范围在 [-1, 1] 之间。也是因此，它只受方向的干扰，不受长度的影响，适用于任何维度向量的比较。</p><ul><li><mark>越接近 1</mark>:表示两个向量之间的的方向越靠近，相似度越高。</li><li><mark>等于 0 时</mark>：表示两个向量之间不存在线性关系，是不相关的。</li><li><mark>越接近 -1</mark>:表示两个向量在多维空间中的方向正好相反，它们是完全不同的。</li></ul><p>余弦相似性通常用于文本处理、信息检索、推荐系统和聚类分析等领域：</p><ul><li><strong>文本处理（NLP）</strong>：在自然语言处理中，可以使用余弦相似性来比较文档、句子或词向量，以确定它们之间的相似性，用于信息检索、文本分类和推荐系统。</li><li><strong>图像处理（CV）</strong>：在计算机视觉中，可以使用余弦相似性来比较图像特征向量，用于图像检索和相似图像查找。</li><li><strong>推荐系统（RS）</strong>：在推荐系统中，可以使用余弦相似性来比较用户与商品之间的偏好向量，从而提供个性化的推荐。</li><li><strong>聚类分析（CA）</strong>：在聚类分析中，余弦相似性可用于度量样本之间的相似性，从而将相似的样本聚集在一起。</li></ul><h4 id="解题思路-1-numpy" tabindex="-1"><a class="header-anchor" href="#解题思路-1-numpy"><span>解题思路 1：Numpy</span></a></h4><p>Numpy 中没有现成的函数，但是可以通过范数函数简化计算步骤，<mark>np.linalg.norm(x, ord)</mark> 函数用于计算 向量/矩阵 范数，主要区别在于 ord 这个参数：</p><table><thead><tr><th>向量</th><th>参数</th><th>矩阵</th><th>参数</th></tr></thead><tbody><tr><td>L1 范数（曼哈顿）</td><td>1</td><td>Frobenius 范数</td><td>&#39;fro&#39;</td></tr><tr><td>L2 范数（欧几里得）</td><td><mark>2 / None</mark></td><td>核范数（奇异值和）</td><td>&#39;nuc&#39;</td></tr><tr><td>L∞ 范数（最大绝对值）</td><td>np.inf</td><td>谱范数（最大奇异值）</td><td><mark>2 / None</mark></td></tr><tr><td>L-∞ 范数（最小绝对值）</td><td>-np.inf</td><td>列和的最大值</td><td>1</td></tr><tr><td>Lp 范数（一般形式）</td><td>p</td><td>行和的最大值</td><td>np.inf</td></tr></tbody></table><p>计算步骤如下：</p><ol><li>使用 <mark>v1 @ v2</mark> 计算向量/矩阵乘法。</li><li>使用 <mark>np.linalg.norm(v1/v2)</mark> 计算 L2 范数，两者相乘。</li><li>最后用向量 <mark>除以</mark> L2 范数就得到了结果。</li></ol><p>一个很有意思的点，题目说 v1 可以是一维或二维数组，并且 v2 的维度必须和 v1 相同。但是，它是输入描述的内容，示例中也没有给出如果不一致返回什么，所以我们并不需要考虑代码的鲁棒性（健壮程度）。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">cosine_similarity</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    val <span class="token operator">=</span> <span class="token punctuation">(</span>v1 @ v2<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token builtin">round</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解题思路-1-python-数组手搓" tabindex="-1"><a class="header-anchor" href="#解题思路-1-python-数组手搓"><span>解题思路 1：Python 数组手搓</span></a></h4><p>向量的余弦相似度算法很好理解，但是矩阵应该怎么理解？普通的矩阵乘法 A @ B 结果还是一个矩阵，每个元素位置都有自己的和。而矩阵版的余弦相似度使用的是 <mark>Frobenius 内积</mark>：<strong>当 A、B 形状相同（same shape）时，对应位置元素相乘并求和，它是一个标量</strong>。同理，范数也是用的是 <mark>Frobenius 范数</mark>：<strong>对所有元素求平方和，最后统一开方</strong>。</p><p>但是很遗憾，牛客网目前的 LA12 题目中，提交的测试用例实际也只有 Vector 向量，并没有 Matrix 矩阵。所以我将代码分为了 <strong>仅向量</strong> 与 <strong>向量/矩阵通用</strong> 两个版本，使用简化的前者版本就可以通过提交测试：</p><ol><li>第一步，构造向量乘法的函数：</li></ol>`,15)),t(c,null,{default:e(()=>[t(l,{title:"余弦相似度 - 仅向量乘法"},{default:e(()=>[...a[30]||(a[30]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"dot_vector"),n("span",{class:"token punctuation"},"("),s("v1"),n("span",{class:"token punctuation"},","),s(" v2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token triple-quoted-string string"},'"""向量乘法 A x B"""')]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"assert"),s(),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("v1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("v2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"向量长度不一致"')]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token builtin"},"sum"),n("span",{class:"token punctuation"},"("),s("v1"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"*"),s(" v2"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token keyword"},"for"),s(" i "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token builtin"},"range"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("v1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1}),t(l,{title:"余弦相似度 - 向量矩阵通用乘法"},{default:e(()=>[...a[31]||(a[31]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"dot_vector"),n("span",{class:"token punctuation"},"("),s("v1"),n("span",{class:"token punctuation"},","),s(" v2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token triple-quoted-string string"},'"""向量乘法 A x B"""')]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"assert"),s(),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("v1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("v2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"向量长度不一致"')]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token builtin"},"sum"),n("span",{class:"token punctuation"},"("),s("v1"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"*"),s(" v2"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token keyword"},"for"),s(" i "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token builtin"},"range"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("v1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"dot_matrix"),n("span",{class:"token punctuation"},"("),s("A"),n("span",{class:"token punctuation"},","),s(" B"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token triple-quoted-string string"},'"""Frobenius: 逐元素相乘再求和"""')]),s(`
`),n("span",{class:"line"},[s("    m"),n("span",{class:"token punctuation"},","),s(" n"),n("span",{class:"token punctuation"},","),s(" p"),n("span",{class:"token punctuation"},","),s(" q "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("A"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("B"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("A"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("B"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"assert"),s(" m "),n("span",{class:"token operator"},"=="),s(" n "),n("span",{class:"token keyword"},"and"),s(" q "),n("span",{class:"token operator"},"=="),s(" p"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"矩阵维度不匹配"')]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    C "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"sum"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),s("A"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"*"),s(" B"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token keyword"},"for"),s(" i "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token builtin"},"range"),n("span",{class:"token punctuation"},"("),s("m"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"for"),s(" j "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token builtin"},"range"),n("span",{class:"token punctuation"},"("),s("p"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(" C")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"multiply"),n("span",{class:"token punctuation"},"("),s("A"),n("span",{class:"token punctuation"},","),s(" B"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token triple-quoted-string string"},'"""通用接口：自动判断向量点积 or 矩阵乘法"""')]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token builtin"},"isinstance"),n("span",{class:"token punctuation"},"("),s("A"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"float"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"and"),s(),n("span",{class:"token builtin"},"isinstance"),n("span",{class:"token punctuation"},"("),s("B"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"float"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"return"),s(" dot_vector"),n("span",{class:"token punctuation"},"("),s("A"),n("span",{class:"token punctuation"},","),s(" B"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token builtin"},"isinstance"),n("span",{class:"token punctuation"},"("),s("A"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"list"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"and"),s(),n("span",{class:"token builtin"},"isinstance"),n("span",{class:"token punctuation"},"("),s("B"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"list"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"return"),s(" dot_matrix"),n("span",{class:"token punctuation"},"("),s("A"),n("span",{class:"token punctuation"},","),s(" B"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"raise"),s(" ValueError"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"输入必须都是向量或矩阵，且维度匹配"'),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1})]),_:1}),a[39]||(a[39]=n("ol",{start:"2"},[n("li",null,"第二步，构造 L2 范数的计算函数：")],-1)),t(c,null,{default:e(()=>[t(l,{title:"L2 范数"},{default:e(()=>[...a[32]||(a[32]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"norm_dim1"),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token builtin"},"sum"),n("span",{class:"token punctuation"},"("),s("val "),n("span",{class:"token operator"},"**"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token keyword"},"for"),s(" val "),n("span",{class:"token keyword"},"in"),s(" x"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"**"),s(),n("span",{class:"token number"},"0.5")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1}),t(l,{title:"通用范数 L2 与 Frobenius"},{default:e(()=>[...a[33]||(a[33]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"multiply_norm"),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token builtin"},"isinstance"),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"float"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token builtin"},"sum"),n("span",{class:"token punctuation"},"("),s("val "),n("span",{class:"token operator"},"**"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token keyword"},"for"),s(" val "),n("span",{class:"token keyword"},"in"),s(" x"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"**"),s(),n("span",{class:"token number"},"0.5")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"elif"),s(),n("span",{class:"token builtin"},"isinstance"),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"list"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token builtin"},"sum"),n("span",{class:"token punctuation"},"("),s("val "),n("span",{class:"token operator"},"**"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token keyword"},"for"),s(" row "),n("span",{class:"token keyword"},"in"),s(" x "),n("span",{class:"token keyword"},"for"),s(" val "),n("span",{class:"token keyword"},"in"),s(" row"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"**"),s(),n("span",{class:"token number"},"0.5")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"else"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"raise"),s(" ValueError"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"只支持一维向量或二维矩阵"'),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1})]),_:1}),a[40]||(a[40]=n("ol",{start:"3"},[n("li",null,"第三步，获取输入的值与计算函数的调用：")],-1)),t(c,null,{default:e(()=>[t(l,{title:"仅向量"},{default:e(()=>[...a[34]||(a[34]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"cosine_similarity"),n("span",{class:"token punctuation"},"("),s("v1"),n("span",{class:"token punctuation"},","),s(" v2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    mul "),n("span",{class:"token operator"},"="),s(" dot_vector"),n("span",{class:"token punctuation"},"("),s("v1"),n("span",{class:"token punctuation"},","),s(" v2"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    L2 "),n("span",{class:"token operator"},"="),s(" norm_dim1"),n("span",{class:"token punctuation"},"("),s("v1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"*"),s(" norm_dim1"),n("span",{class:"token punctuation"},"("),s("v2"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    val "),n("span",{class:"token operator"},"="),s(" mul "),n("span",{class:"token operator"},"/"),s(" L2")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token builtin"},"round"),n("span",{class:"token punctuation"},"("),s("val"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"if"),s(" __name__ "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},'"__main__"'),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    v1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"eval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    v2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"eval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("cosine_similarity"),n("span",{class:"token punctuation"},"("),s("v1"),n("span",{class:"token punctuation"},","),s(" v2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1}),t(l,{title:"向量矩阵通用"},{default:e(()=>[...a[35]||(a[35]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"cosine_similarity"),n("span",{class:"token punctuation"},"("),s("v1"),n("span",{class:"token punctuation"},","),s(" v2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    mul "),n("span",{class:"token operator"},"="),s(" multiply"),n("span",{class:"token punctuation"},"("),s("v1"),n("span",{class:"token punctuation"},","),s(" v2"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    L2 "),n("span",{class:"token operator"},"="),s(" multiply_norm"),n("span",{class:"token punctuation"},"("),s("v1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"*"),s(" multiply_norm"),n("span",{class:"token punctuation"},"("),s("v2"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    val "),n("span",{class:"token operator"},"="),s(" mul "),n("span",{class:"token operator"},"/"),s(" L2")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token builtin"},"round"),n("span",{class:"token punctuation"},"("),s("val"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"if"),s(" __name__ "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},'"__main__"'),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    v1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"eval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    v2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"eval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("cosine_similarity"),n("span",{class:"token punctuation"},"("),s("v1"),n("span",{class:"token punctuation"},","),s(" v2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1})]),_:1})])}const un=r(k,[["render",on]]),rn=JSON.parse('{"path":"/blogs/CodeExam/AI/LinearAlgebra/LA12.html","title":"LA12.计算向量之间的余弦相似度","lang":"en-US","frontmatter":{"title":"LA12.计算向量之间的余弦相似度","date":"2025/09/30","categories":["每日一题"],"tags":["AI题库","线性代数"]},"headers":[],"git":{"createdTime":1759137746000,"updatedTime":1759223143000,"contributors":[{"name":"jinkai","email":"1213860588@qq.com","commits":2}]},"filePathRelative":"blogs/CodeExam/AI/LinearAlgebra/LA12.md"}');export{un as comp,rn as data};
