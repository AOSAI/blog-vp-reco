import{_ as o,c as t,a as s,b as e,d as l,e as a,r as p,o as r}from"./app-C8tFmbRl.js";const d="/blog-vp-reco/cv/ImageProcessing/01_xxx/00-02.png",g="/blog-vp-reco/cv/ImageProcessing/01_xxx/00-03.png",u="/blog-vp-reco/cv/ImageProcessing/01_xxx/00-04.png",c="/blog-vp-reco/cv/ImageProcessing/01_xxx/00-05.png",v="/blog-vp-reco/cv/ImageProcessing/01_xxx/00-06.png",h={},m={href:"https://pillow.ac.cn/en/stable/index.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.python.org/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.anaconda.com",target:"_blank",rel:"noopener noreferrer"},_={href:"https://visualstudio.microsoft.com/zh-hans/vs/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://opencv.org/releases/",target:"_blank",rel:"noopener noreferrer"};function V(P,n){const i=p("ExternalLinkIcon");return r(),t("div",null,[n[20]||(n[20]=s('<h2 id="_1-图像处理的定义与范围" tabindex="-1"><a class="header-anchor" href="#_1-图像处理的定义与范围"><span>1. 图像处理的定义与范围</span></a></h2><p>图像处理（Image Processing）是对数字图像进行操作，以达到改善图像质量、提取信息或实现特定应用的目的。其范围横跨基础操作、增强与复原、压缩、分析等多个层面。在计算机视觉（Computer Vision, CV）体系中，图像处理既是底层工具，也是更高级任务（检测、识别、理解）的前提。</p><h3 id="_1-1-基础操作" tabindex="-1"><a class="header-anchor" href="#_1-1-基础操作"><span>1.1 基础操作</span></a></h3><p>基础操作是图像处理的起点，主要包括 <strong>图像的输入输出与数据格式处理</strong>、<strong>色彩空间转换</strong>、<strong>几何空间变换</strong> 等内容。</p><ol><li><mark>输入输出与数据格式</mark> 为后续处理提供了数据基础，如图像的读取、显示、存储与数据类型管理；</li><li><mark>色彩空间转换</mark> 通过在 RGB、HSV、Lab 等空间间切换，实现亮度与色彩信息的分离，便于分割、增强或特定视觉任务的实现；</li><li><mark>几何空间变换</mark> 则涵盖了缩放、旋转、翻转、仿射与透视等操作，用于图像校正与数据增强。</li></ol><p>这些操作虽然简单，但几乎贯穿所有图像处理流程，是学习 OpenCV 的必备入门环节，也是理解更复杂算法的基础。</p><h3 id="_1-2-图像增强" tabindex="-1"><a class="header-anchor" href="#_1-2-图像增强"><span>1.2 图像增强</span></a></h3><p>图像增强主要分为 <strong>平滑处理</strong>、<strong>锐化处理</strong>、<strong>直方图均衡化</strong> 三个方面。</p><ol><li><mark>平滑处理</mark> 主要用于削弱图像中的噪声与细微纹理，使整体画面更加自然、连续；</li><li><mark>锐化处理</mark> 通过增强图像的边缘与细节，提升视觉清晰度和结构感；</li><li><mark>直方图均衡化</mark> 则通过调整灰度分布，改善对比度，使暗区更清晰、亮区更细腻。</li></ol><p>这些方法虽然处理方式不同，但共同目标都是突出人眼或后续计算机视觉任务所需的关键信息，因此在图像预处理、目标检测、医学成像、古画修复等应用中都有广泛使用。</p><h3 id="_1-3-图像复原-去噪、去模糊" tabindex="-1"><a class="header-anchor" href="#_1-3-图像复原-去噪、去模糊"><span>1.3 图像复原（去噪、去模糊）</span></a></h3><p>目的：从退化的图像中尽可能恢复原始图像。</p><ul><li>噪声模型：高斯噪声、椒盐噪声、泊松噪声</li><li>去噪方法 <ul><li>空域滤波（中值滤波）</li><li>频域滤波（低通滤波）</li><li>高级方法：非局部均值（NLM）、BM3D、小波去噪</li></ul></li><li>去模糊 <ul><li>均值运动模糊去卷积（去卷积：卷积的逆运算）</li><li>维纳滤波（Wiener Filtering）</li><li>盲去卷积（Blind Deconvolution）</li></ul></li></ul><p>👉 和“增强”不同，复原假设有退化模型（噪声/模糊机制已知），目标是重建原始图像。</p><h3 id="_1-4-图像压缩-jpeg、png" tabindex="-1"><a class="header-anchor" href="#_1-4-图像压缩-jpeg、png"><span>1.4 图像压缩（JPEG、PNG）</span></a></h3><p>目的：在有限存储/传输资源下，减少图像数据量。</p><ul><li>无损压缩 <ul><li>PNG、GIF、TIFF</li><li>基于熵编码（霍夫曼编码、LZW）</li></ul></li><li>有损压缩 <ul><li>JPEG（离散余弦变换 DCT + 量化 + 熵编码）</li><li>WebP/HEIC（更高压缩率）</li></ul></li></ul><p>关键点：压缩要在存储效率和视觉质量之间平衡。</p><h3 id="_1-5-图像分析-分割、特征、识别" tabindex="-1"><a class="header-anchor" href="#_1-5-图像分析-分割、特征、识别"><span>1.5 图像分析（分割、特征、识别）</span></a></h3><p>目的：从图像中提取有用信息，进入计算机视觉层面。</p><ul><li>图像分割 <ul><li>阈值分割（Otsu）、边缘分割、区域生长</li><li>现代方法：语义分割（FCN、U-Net）</li></ul></li><li>特征提取 <ul><li>经典：SIFT、SURF、ORB（关键点 + 描述子）</li><li>深度学习：CNN 特征（ResNet、VGG）</li></ul></li><li>模式识别 / 目标检测 <ul><li>人脸识别、目标检测（YOLO、Faster R-CNN）</li><li>OCR（光学字符识别）</li></ul></li></ul><h2 id="_2-opencv-与-pillow" tabindex="-1"><a class="header-anchor" href="#_2-opencv-与-pillow"><span>2. OpenCV 与 Pillow</span></a></h2><p>OpenCV 的定位是<strong>计算机视觉库</strong>，涵盖图像处理、特征提取、视频处理、目标检测、机器学习接口等。在后续的内容里，主要使用 OpenCV 进行代码演示。</p><p>Pillow (PIL)：定位是<strong>图像基础操作库</strong>，比如加载/保存图片、裁剪、旋转、滤镜、简单绘制等，适合快速处理图像文件。</p><p>它们是目前最受欢迎，也是最常用的两个图像处理的库。虽然 OpenCV 覆盖了 Pillow 的大部分功能（特别是基础的读写、变换、滤镜等），但 Pillow 是 Python 集成的，相对比较轻量化一点，也有很多优点（见 2.1 Pillow），在某些应用场景中二者常常互补。</p><h3 id="_2-1-pillow" tabindex="-1"><a class="header-anchor" href="#_2-1-pillow"><span>2.1 Pillow</span></a></h3>',26)),e("p",null,[n[1]||(n[1]=l("Pillow 是 Python Imaging Library（PIL）的一个分支，中文版的官方文档写的很好：",-1)),e("a",m,[n[0]||(n[0]=l("Pillow 官方文档 - 中文",-1)),a(i)]),n[2]||(n[2]=l("。它的优势可以总结为以下几点：",-1))]),n[21]||(n[21]=s('<p><strong>1. 更丰富的图像格式支持</strong></p><ul><li>Pillow 对各种冷门/专业的图像格式支持更好：GIF（含动图帧操作）；ICO、ICNS（图标格式）；TIFF（多页 TIFF，尤其是科研/扫描领域常用）；EPS（PostScript）。</li><li>OpenCV 主要支持 常见格式（jpg、png、bmp、tiff 部分），动图、矢量、图标这类就不行。</li></ul><p>比如，Pillow 可以直接读取动图的多帧，逐帧修改再保存回去，但 OpenCV 加载 GIF 只会拿到第一帧，不支持多帧动图编辑。</p><p><strong>2. 图像绘制更直观</strong></p><ul><li>Pillow 提供了 ImageDraw，可以很方便地：绘制点、线、矩形、圆、多边形；添加文字（ImageFont 支持各种字体、字号、ttf 字体加载）。</li><li>OpenCV 也有绘制接口（cv2.line、cv2.putText），但：字体支持非常有限（只有 Hershey 系列，不能随意加载中文/自定义字体）；绘制效果比较“硬核”，不如 Pillow 灵活。</li></ul><p>👉 如果你要做 生成海报、加水印、绘制带中文的图形，Pillow 完胜。</p><p><strong>3. 和 Python 标准库/生态结合更紧密</strong></p><ul><li>Pillow 是 Python 社区的“官方图像处理库”，跟 io.BytesIO、requests、Django/Flask 等框架结合特别顺滑。例如，Pillow 对接 Web 开发（上传、缩略图、裁切头像）几乎是默认选择。</li><li>OpenCV 更偏 科研 / 工业应用，在 Web/服务端场景没那么常见。</li></ul><p><strong>4. 图像合成 / 透明度支持</strong></p><ul><li>Pillow 的 paste()、alpha_composite() 很适合做图像合成，支持透明 PNG、Alpha 通道混合。</li><li>OpenCV 也能做，但需要手写 mask、通道操作，相对麻烦。</li></ul><h3 id="_2-2-opencv" tabindex="-1"><a class="header-anchor" href="#_2-2-opencv"><span>2.2 OpenCV</span></a></h3><p>OpenCV（Open Source Computer Vision Library）是一个开源的计算机视觉库，由英特尔公司于 1999 年发起。它提供了大量的图像处理和计算机视觉功能，广泛应用于物体识别、面部识别、图像分割等领域。</p><p>OpenCV 是用 C/C++ 编写的，具有很高的处理速度，适合处理大规模图像数据。支持 Python、C++、Java 等多种编程语言，Python 是最常用的接口。同时，它还支持深度学习模型的推理，可以加载 TensorFlow、Caffe、Torch 等框架的模型。</p><h2 id="_3-python-中使用-opencv" tabindex="-1"><a class="header-anchor" href="#_3-python-中使用-opencv"><span>3. Python 中使用 OpenCV</span></a></h2><h3 id="_3-1-python-解释器" tabindex="-1"><a class="header-anchor" href="#_3-1-python-解释器"><span>3.1 Python 解释器</span></a></h3>',15)),e("p",null,[n[4]||(n[4]=l("Python 是一个解释型的高级编程语言，安装了 Python 就相当于安装了解释器，它可以让我们直接解析和运行 .py 文件。",-1)),e("a",b,[n[3]||(n[3]=l("《Python 官网》",-1)),a(i)]),n[5]||(n[5]=l("。",-1))]),e("p",null,[n[7]||(n[7]=l("但是学习的话，大多都直接安装 Anaconda，它将 “环境管理” + “包管理” 融为一体，比较方便我们使用。",-1)),e("a",C,[n[6]||(n[6]=l("《Anaconda 下载地址》",-1)),a(i)]),n[8]||(n[8]=l("。",-1))]),n[22]||(n[22]=s(`<h3 id="_3-2-集成开发环境-ide" tabindex="-1"><a class="header-anchor" href="#_3-2-集成开发环境-ide"><span>3.2 集成开发环境（IDE）</span></a></h3><p>Python 的主流 IDE 都是跨平台的：VS Code、PyCharm、JupyterLab。它们本质上就是一个「开发环境 + 编辑器」，只要你本地能安装 Python 解释器，就能跑。Win / macOS / Linux 基本体验差不多，不会因为系统不同，导致换 IDE。</p><h3 id="_3-3-安装与使用" tabindex="-1"><a class="header-anchor" href="#_3-3-安装与使用"><span>3.3 安装与使用</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">pip install opencv<span class="token operator">-</span>python  <span class="token comment"># 安装命令</span></span>
<span class="line"><span class="token keyword">import</span> cv2  <span class="token comment"># 导入代码</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span>  <span class="token comment"># 验证是否导入成功</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-c-安装使用-opencv" tabindex="-1"><a class="header-anchor" href="#_4-c-安装使用-opencv"><span>4. C++ 安装使用 OpenCV</span></a></h2><h3 id="_4-1-安装-visual-studio-2022" tabindex="-1"><a class="header-anchor" href="#_4-1-安装-visual-studio-2022"><span>4.1 安装 Visual Studio 2022</span></a></h3>`,6)),e("ol",null,[e("li",null,[e("p",null,[n[10]||(n[10]=l("打开 ",-1)),e("a",_,[n[9]||(n[9]=l("Visual Studio 官网",-1)),a(i)]),n[11]||(n[11]=l("，在 ",-1)),n[12]||(n[12]=e("strong",null,"下载",-1)),n[13]||(n[13]=l(" 下拉框中选择 ",-1)),n[14]||(n[14]=e("strong",null,"社区版 2022（Community 2022）",-1)),n[15]||(n[15]=l("。",-1))])]),n[16]||(n[16]=e("li",null,[e("p",null,[l("打开下载的 exe 文件，根据你的开发需求选择安装。一般来说，如果只是为了用 C++结合 OpenCV 写点东西，选择一个 "),e("strong",null,"使用 C++的桌面开发"),l(" 就够了，右边栏里的选项默认即可。")])],-1))]),n[23]||(n[23]=s('<figure><img src="'+d+'" alt="4.1 安装C++" width="560" tabindex="0" loading="lazy"><figcaption>4.1 安装C++</figcaption></figure><ol start="3"><li>选择安装路径时，需要注意两点：（1）最好不要安装在 C 盘，并且不要出现中文路径。（2）缓存文件和安装文件不能放在同一个文件夹里，最简单的办法就是，只改变根路径（比如 C:\\Program Files\\ ......），子路径保持不变（变为 D:\\VS\\ ......）。</li></ol><figure><img src="'+g+`" alt="4.2 选择安装路径" width="560" tabindex="0" loading="lazy"><figcaption>4.2 选择安装路径</figcaption></figure><ol start="4"><li>安装好之后，登录与否看你心情。创建一个新项目 --&gt; 选择 <strong>空项目</strong> --&gt; 设置项目路径 --&gt; 在文件结构中选择 <strong>源文件</strong>，右键创建一个 cpp 文件，输入以下代码，测试是否能够成功运行。</li></ol><div class="language-C++ line-numbers-mode" data-highlighter="prismjs" data-ext="C++" data-title="C++"><pre><code><span class="line">#include &lt;stdio.h&gt;</span>
<span class="line">using namespace std;</span>
<span class="line"></span>
<span class="line">int main()</span>
<span class="line">{</span>
<span class="line">    printf(&quot;Hello World&quot;);</span>
<span class="line">    return 0;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-下载-opencv" tabindex="-1"><a class="header-anchor" href="#_4-2-下载-opencv"><span>4.2 下载 OpenCV</span></a></h3>`,6)),e("p",null,[n[18]||(n[18]=l("打开 C++所使用的 OpenCV 资源网站：",-1)),e("a",f,[n[17]||(n[17]=l("OpenCV 下载中心",-1)),a(i)]),n[19]||(n[19]=l("，下载一个你需要的版本。没有具体要求，就下载倒数第二新的版本，防止出错。",-1))]),n[24]||(n[24]=s('<figure><img src="'+u+'" alt="4.3 安装OpenCV" width="560" tabindex="0" loading="lazy"><figcaption>4.3 安装OpenCV</figcaption></figure><p>就比如这里，最新的是 4.10.0 版本，我们就下载 4.9.0 版本的 windows 安装包就行。在运行下载好的 opencv-4.9.0-windows.exe 文件时，除了选择安装位置外，其余都默认。<mark>假设我们安装在 D:\\OpenCV 路径下</mark></p><h3 id="_4-3-ide-项目中配置-opencv" tabindex="-1"><a class="header-anchor" href="#_4-3-ide-项目中配置-opencv"><span>4.3 IDE 项目中配置 OpenCV</span></a></h3><ol><li>点击刚才创建好的项目，再点击上方的 <strong>小扳手</strong> 按钮，打开项目的属性页。</li></ol><figure><img src="'+c+'" alt="4.4 安装OpenCV" width="560" tabindex="0" loading="lazy"><figcaption>4.4 安装OpenCV</figcaption></figure><ol start="2"><li>找到 <strong>CV++目录</strong> 中的 <strong>外部包含目录</strong> 和 <strong>库目录</strong>。将 OpenCV 安装路径下的这两个路径，分别写入。</li></ol><ul><li>D:\\OpenCV\\opencv\\build\\include --&gt; 外部包含目录</li><li>D:\\OpenCV\\opencv\\build\\x64\\vc16\\lib --&gt; 库目录</li></ul><figure><img src="'+v+`" alt="4.5 C++项目配置OpenCV1" width="560" tabindex="0" loading="lazy"><figcaption>4.5 C++项目配置OpenCV1</figcaption></figure><p>以第一个为例，<strong>外部包含目录</strong>的最右侧有一个下拉框 --&gt; 点击 <strong>编辑</strong> --&gt; 粘贴<strong>D:\\OpenCV\\opencv\\build\\include</strong> --&gt; 点击 <strong>确认按钮</strong>，完成操作。</p><ol start="3"><li>找到 <strong>链接器</strong> 中的 <strong>输入</strong>，第一项为 <strong>附加默认项</strong>，同样的操作，把 OpenCV 刚才 \\build\\x64\\vc16\\lib 路径下的 opencv_world4100d.lib 文件路径，复制粘贴进去。</li></ol><ul><li>&quot;D:\\OpenCV\\opencv\\build\\x64\\vc16\\lib\\opencv_world4100d.lib&quot;</li></ul><p><mark>需要注意的是：</mark></p><ul><li>opencv_world4100d.lib 文件表示在 Debug 模式下运行</li><li>opencv_world4100.lib 文件表示在 Release 模式下运行</li></ul><p>我在图 4.4 和图 4.5 中已经用橙色的方框圈起来了，VS 中默认运行的是 Debug 模式。如果你需要在 Release 模式下运行，请在属性页，配置处，修改为 Release，然后重复上述步骤。</p><ol start="4"><li>复制粘贴以下代码，如果不报错，并且能成功运行，即为该项目配置 OpenCV 成功。</li></ol><div class="language-C++ line-numbers-mode" data-highlighter="prismjs" data-ext="C++" data-title="C++"><pre><code><span class="line">#include &lt;stdio.h&gt;</span>
<span class="line">#include &lt;opencv2/opencv.hpp&gt;</span>
<span class="line"></span>
<span class="line">using namespace std;</span>
<span class="line">using namespace cv;</span>
<span class="line"></span>
<span class="line">int main()</span>
<span class="line">{</span>
<span class="line">    // 输出 OpenCV 版本</span>
<span class="line">    printf(CV_VERSION);</span>
<span class="line">    return 0;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16))])}const x=o(h,[["render",V]]),O=JSON.parse('{"path":"/blogs/ComputerVision/ImageProcessing/01_zongshu.html","title":"图像处理综述","lang":"en-US","frontmatter":{"title":"图像处理综述","date":"2025/08/21","categories":["计算机视觉"],"tags":["图像处理","OpenCV","Pillow","综述"]},"headers":[{"level":2,"title":"1. 图像处理的定义与范围","slug":"_1-图像处理的定义与范围","link":"#_1-图像处理的定义与范围","children":[{"level":3,"title":"1.1 基础操作","slug":"_1-1-基础操作","link":"#_1-1-基础操作","children":[]},{"level":3,"title":"1.2 图像增强","slug":"_1-2-图像增强","link":"#_1-2-图像增强","children":[]},{"level":3,"title":"1.3 图像复原（去噪、去模糊）","slug":"_1-3-图像复原-去噪、去模糊","link":"#_1-3-图像复原-去噪、去模糊","children":[]},{"level":3,"title":"1.4 图像压缩（JPEG、PNG）","slug":"_1-4-图像压缩-jpeg、png","link":"#_1-4-图像压缩-jpeg、png","children":[]},{"level":3,"title":"1.5 图像分析（分割、特征、识别）","slug":"_1-5-图像分析-分割、特征、识别","link":"#_1-5-图像分析-分割、特征、识别","children":[]}]},{"level":2,"title":"2. OpenCV 与 Pillow","slug":"_2-opencv-与-pillow","link":"#_2-opencv-与-pillow","children":[{"level":3,"title":"2.1 Pillow","slug":"_2-1-pillow","link":"#_2-1-pillow","children":[]},{"level":3,"title":"2.2 OpenCV","slug":"_2-2-opencv","link":"#_2-2-opencv","children":[]}]},{"level":2,"title":"3. Python 中使用 OpenCV","slug":"_3-python-中使用-opencv","link":"#_3-python-中使用-opencv","children":[{"level":3,"title":"3.1 Python 解释器","slug":"_3-1-python-解释器","link":"#_3-1-python-解释器","children":[]},{"level":3,"title":"3.2 集成开发环境（IDE）","slug":"_3-2-集成开发环境-ide","link":"#_3-2-集成开发环境-ide","children":[]},{"level":3,"title":"3.3 安装与使用","slug":"_3-3-安装与使用","link":"#_3-3-安装与使用","children":[]}]},{"level":2,"title":"4. C++ 安装使用 OpenCV","slug":"_4-c-安装使用-opencv","link":"#_4-c-安装使用-opencv","children":[{"level":3,"title":"4.1 安装 Visual Studio 2022","slug":"_4-1-安装-visual-studio-2022","link":"#_4-1-安装-visual-studio-2022","children":[]},{"level":3,"title":"4.2 下载 OpenCV","slug":"_4-2-下载-opencv","link":"#_4-2-下载-opencv","children":[]},{"level":3,"title":"4.3 IDE 项目中配置 OpenCV","slug":"_4-3-ide-项目中配置-opencv","link":"#_4-3-ide-项目中配置-opencv","children":[]}]}],"git":{"createdTime":1757688790000,"updatedTime":1758475598000,"contributors":[{"name":"zjk","email":"1213860588@qq.com","commits":2}]},"filePathRelative":"blogs/ComputerVision/ImageProcessing/01_综述.md"}');export{x as comp,O as data};
