import{_ as c,c as u,a as l,e as p,w as t,r as o,o as r,b as n,d as s}from"./app-CkYqgEgS.js";const k={};function d(m,a){const e=o("CodeGroupItem"),i=o("CodeGroup");return r(),u("div",null,[a[2]||(a[2]=l('<h4 id="难度-简单" tabindex="-1"><a class="header-anchor" href="#难度-简单"><span>难度：简单</span></a></h4><p>实现一个函数，将一维向量转换为对角矩阵。对角矩阵是一个方阵，其主对角线上的元素来自输入向量，而其他位置的元素都为 0。</p><ul><li><strong>输入描述</strong>：第一行输入一个一维向量，长度为 n。</li><li><strong>输出描述</strong>：返回一个二维 numpy 数组（方阵）： <ol><li>维度为 n x n，其中 n 是输入向量的长度</li><li>对角线上的元素来自输入向量</li><li>其他位置的元素都为 0</li><li>元素类型不需要手动修改，让它为默认的即可。</li></ol></li></ul>',3)),p(i,null,{default:t(()=>[p(e,{title:"代码框架"},{default:t(()=>[...a[0]||(a[0]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(" numpy "),n("span",{class:"token keyword"},"as"),s(" np")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"make_diagonal"),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"pass")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"if"),s(" __name__ "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},'"__main__"'),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    x "),n("span",{class:"token operator"},"="),s(" np"),n("span",{class:"token punctuation"},"."),s("array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"eval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("make_diagonal"),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1}),p(e,{title:"示例 1"},{default:t(()=>[...a[1]||(a[1]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 输入：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 输出：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1."),s(),n("span",{class:"token number"},"0."),s(),n("span",{class:"token number"},"0."),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"},[s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0."),s(),n("span",{class:"token number"},"2."),s(),n("span",{class:"token number"},"0."),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"},[s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0."),s(),n("span",{class:"token number"},"0."),s(),n("span",{class:"token number"},"3."),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1})]),_:1}),a[3]||(a[3]=l(`<hr><h4 id="解题思路-1-numpy-数组处理" tabindex="-1"><a class="header-anchor" href="#解题思路-1-numpy-数组处理"><span>解题思路 1：Numpy 数组处理</span></a></h4><p>Numpy 中的 <mark>np.diag()</mark> 函数专门用来，将一维向量转化为对角矩阵。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">make_diagonal</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> np<span class="token punctuation">.</span>diag<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>x<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种思路是使用 <mark>np.identity()</mark> 函数生成一个单位矩阵，然后利用广播直接相乘，亦或者使用一个循环乘法，将对角线的元素变成向量元素。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">make_diagonal</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> np<span class="token punctuation">.</span>identity<span class="token punctuation">(</span>np<span class="token punctuation">.</span>size<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> x</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解题思路-2-python-数组手搓" tabindex="-1"><a class="header-anchor" href="#解题思路-2-python-数组手搓"><span>解题思路 2：Python 数组手搓</span></a></h4><p>手搓的思路其实和 Numpy 差不多，难点在于输出的格式，要和 Numpy 一致。这里手写了 format_print_numpy_style 函数，用于控制输出风格。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">format_print_numpy_style</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> decimals<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">for</span> row <span class="token keyword">in</span> A<span class="token punctuation">:</span></span>
<span class="line">        row_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">for</span> v <span class="token keyword">in</span> row<span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment"># 四舍五入到指定小数位</span></span>
<span class="line">            v_rounded <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> decimals<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment"># 如果是整数，显示 1. 而不是 1</span></span>
<span class="line">            <span class="token keyword">if</span> v_rounded <span class="token operator">==</span> <span class="token builtin">int</span><span class="token punctuation">(</span>v_rounded<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">                s <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">int</span><span class="token punctuation">(</span>v_rounded<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">.&quot;</span></span></span>
<span class="line">            <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">                s <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>v_rounded<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line">            row_str<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line">        lines<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>row_str<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 每行用换行分开，并加上外层列表括号</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;[&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;\\n &quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">&quot;[&quot;</span> <span class="token operator">+</span> line <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">make_diagonal</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">    new_x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        new_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> format_print_numpy_style<span class="token punctuation">(</span>new_x<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span></span>
<span class="line">    x <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>make_diagonal<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9))])}const b=c(k,[["render",d]]),y=JSON.parse('{"path":"/blogs/CodeExam/AI/LinearAlgebra/LA8.html","title":"LA8.将向量转换为对角矩阵","lang":"en-US","frontmatter":{"title":"LA8.将向量转换为对角矩阵","date":"2025/09/28","categories":["每日一题"],"tags":["AI题库","线性代数"]},"headers":[],"git":{"createdTime":1759087649000,"updatedTime":1759087649000,"contributors":[{"name":"zjk","email":"1213860588@qq.com","commits":1}]},"filePathRelative":"blogs/CodeExam/AI/LinearAlgebra/LA8.md"}');export{b as comp,y as data};
