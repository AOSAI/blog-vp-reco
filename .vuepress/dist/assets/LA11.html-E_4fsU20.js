import{_ as i,c as u,a as l,e as t,w as e,r as c,o as r,b as n,d as s}from"./app-DPGM4BTH.js";const k={};function d(m,a){const p=c("CodeGroupItem"),o=c("CodeGroup");return r(),u("div",null,[a[2]||(a[2]=l('<h4 id="难度-简单" tabindex="-1"><a class="header-anchor" href="#难度-简单"><span>难度：简单</span></a></h4><p>实现一个函数来将密集矩阵（dense matrix）转换为压缩列稀疏（Compressed Column Sparse, CCS）格式。CCS 是一种高效存储稀疏矩阵的方法，只存储非零元素及其位置信息。CCS 格式由三个数组组成：</p><ol><li>values：按列优先顺序存储的非零元素值</li><li>row_indices：每个非零元素对应的行索引</li><li>column_pointer：指示每列起始位置的指针数组</li></ol><ul><li><strong>输入描述</strong>：输入为一个二维列表 dense_matrix，表示待转换的密集矩阵。</li><li><strong>输出描述</strong>：输出三个列表，分别表示： <ol><li>values：所有非零元素值的列表，按列优先顺序排列</li><li>row_indices：对应每个非零元素的行索引</li><li>column_pointer：每列在 values 数组中的起始位置索引（包含最后一列结束位置）</li></ol></li></ul>',4)),t(o,null,{default:e(()=>[t(p,{title:"代码框架"},{default:e(()=>[...a[0]||(a[0]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"compressed_col_sparse_matrix"),n("span",{class:"token punctuation"},"("),s("dense_matrix"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(" vals"),n("span",{class:"token punctuation"},","),s(" row_idx"),n("span",{class:"token punctuation"},","),s(" col_ptr")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"if"),s(" __name__ "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},'"__main__"'),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    dense_matrix "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"eval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    vals"),n("span",{class:"token punctuation"},","),s(" row_idx"),n("span",{class:"token punctuation"},","),s(" col_ptr "),n("span",{class:"token operator"},"="),s(" compressed_col_sparse_matrix"),n("span",{class:"token punctuation"},"("),s("dense_matrix"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("vals"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("row_idx"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("col_ptr"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1}),t(p,{title:"示例 1"},{default:e(()=>[...a[1]||(a[1]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 输入：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 输出：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1})]),_:1}),a[3]||(a[3]=l(`<hr><h4 id="解题思路-1-python-数组手搓" tabindex="-1"><a class="header-anchor" href="#解题思路-1-python-数组手搓"><span>解题思路 1：Python 数组手搓</span></a></h4><p>稀疏矩阵的列压缩方法与行压缩很类似，而且这里的输入输出描述更为精确，按照要求写即可。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">compressed_col_sparse_matrix</span><span class="token punctuation">(</span>dense_matrix<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    row <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dense_matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    col <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dense_matrix<span class="token punctuation">)</span></span>
<span class="line">    vals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    row_idx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    col_ptr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    temp <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">if</span> dense_matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">                vals<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dense_matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">                row_idx<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span></span>
<span class="line">                temp <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">        col_ptr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> vals<span class="token punctuation">,</span> row_idx<span class="token punctuation">,</span> col_ptr</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解题思路-2-numpy-scipy" tabindex="-1"><a class="header-anchor" href="#解题思路-2-numpy-scipy"><span>解题思路 2：Numpy + SciPy</span></a></h4><p>SciPy 的压缩行是 scipy.sparse 模块中的 csr_matrix 函数，压缩列是 <mark>csc_matrix</mark> 函数。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>sparse <span class="token keyword">import</span> csc_matrix</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">compressed_col_sparse_matrix</span><span class="token punctuation">(</span>dense_matrix<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">  A <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>dense_matrix<span class="token punctuation">)</span></span>
<span class="line">  csc <span class="token operator">=</span> csc_matrix<span class="token punctuation">(</span>A<span class="token punctuation">)</span></span>
<span class="line">  vals <span class="token operator">=</span> csc<span class="token punctuation">.</span>data<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  row_idx <span class="token operator">=</span> csc<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  col_ptr <span class="token operator">=</span> csc<span class="token punctuation">.</span>indptr<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> vals<span class="token punctuation">,</span> row_idx<span class="token punctuation">,</span> col_ptr</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7))])}const v=i(k,[["render",d]]),_=JSON.parse('{"path":"/blogs/CodeExam/AI/LinearAlgebra/LA11.html","title":"LA11.实现压缩列稀疏矩阵","lang":"en-US","frontmatter":{"title":"LA11.实现压缩列稀疏矩阵","date":"2025/09/29","categories":["每日一题"],"tags":["AI题库","线性代数"]},"headers":[],"git":{"createdTime":1759137746000,"updatedTime":1759137746000,"contributors":[{"name":"jinkai","email":"1213860588@qq.com","commits":1}]},"filePathRelative":"blogs/CodeExam/AI/LinearAlgebra/LA11.md"}');export{v as comp,_ as data};
