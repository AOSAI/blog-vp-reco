import{_ as i,c as u,a as l,e,w as t,r as c,o as r,b as n,d as s}from"./app-DPGM4BTH.js";const k={};function m(d,a){const p=c("CodeGroupItem"),o=c("CodeGroup");return r(),u("div",null,[a[3]||(a[3]=l('<h4 id="难度-简单" tabindex="-1"><a class="header-anchor" href="#难度-简单"><span>难度：简单</span></a></h4><p>编写一个函数，该函数计算矩阵和向量的点积。如果矩阵无法与向量进行点积，则返回 -1。</p><ul><li><strong>输入描述</strong>：第一行输入矩阵，第二行输入需要相乘的向量。</li><li><strong>输出描述</strong>：输出对应的点积，返回结果以 list 形式。</li><li>备注说明： <ol><li>Python3 对应的输入、输出已给出，您只用实现核心功能函数即可。</li><li>支持 numpy、scipy、pandas、scikit-learn 库。</li></ol></li></ul>',3)),e(o,null,{default:t(()=>[e(p,{title:"代码框架"},{default:t(()=>[...a[0]||(a[0]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"matrix_vector_dot_product"),n("span",{class:"token punctuation"},"("),s("matrix"),n("span",{class:"token punctuation"},","),s(" vector"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"# 补全代码")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 主程序")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"if"),s(" __name__ "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},'"__main__"'),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"# 输入矩阵和向量")]),s(`
`),n("span",{class:"line"},[s("    matrix_input "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    vector_input "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"# 处理输入")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"import"),s(" ast")]),s(`
`),n("span",{class:"line"},[s("    matrix "),n("span",{class:"token operator"},"="),s(" ast"),n("span",{class:"token punctuation"},"."),s("literal_eval"),n("span",{class:"token punctuation"},"("),s("matrix_input"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    vector "),n("span",{class:"token operator"},"="),s(" ast"),n("span",{class:"token punctuation"},"."),s("literal_eval"),n("span",{class:"token punctuation"},"("),s("vector_input"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"# 调用函数计算点积")]),s(`
`),n("span",{class:"line"},[s("    output "),n("span",{class:"token operator"},"="),s(" matrix_vector_dot_product"),n("span",{class:"token punctuation"},"("),s("matrix"),n("span",{class:"token punctuation"},","),s(" vector"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"# 输出结果")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("output"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1}),e(p,{title:"示例 1"},{default:t(()=>[...a[1]||(a[1]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 输入：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 输出：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"17"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"14"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 说明：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token number"},"3"),s("∗"),n("span",{class:"token number"},"2"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"5"),s("∗"),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"2"),s("∗"),n("span",{class:"token number"},"3"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"17"),s("，"),n("span",{class:"token number"},"1"),s("∗"),n("span",{class:"token number"},"2"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"0"),s("∗"),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"4"),s("∗"),n("span",{class:"token number"},"3"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"14"),s("，"),n("span",{class:"token number"},"2"),s("∗"),n("span",{class:"token number"},"2"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"3"),s("∗"),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"1"),s("∗"),n("span",{class:"token number"},"3"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"10")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1}),e(p,{title:"示例 2"},{default:t(()=>[...a[2]||(a[2]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 输入：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 输出：")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 说明：")]),s(`
`),n("span",{class:"line"},[s("矩阵维度（"),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"3"),s("），向量维度（"),n("span",{class:"token number"},"2"),s("，"),n("span",{class:"token number"},"1"),s("），维度不匹配，返回"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])]),_:1})]),_:1}),a[4]||(a[4]=l(`<hr><h4 id="解题思路-1-python-中的数组处理" tabindex="-1"><a class="header-anchor" href="#解题思路-1-python-中的数组处理"><span>解题思路 1：Python 中的数组处理</span></a></h4><p>回顾一下矩阵的定义，有 m 行，每一行都有相同的 n 个数，所以整体是 m×n 的长方形。该题的核心点在于矩阵乘法的口诀：<mark>前行乘后列，两者的元素个数要相同</mark>，满足这个条件即可。</p><p>向量是一个一维数组，而矩阵中的每一个数组都代表的行，我们取矩阵的第一行长度和向量的长度做对比，若不相等便没办法点积。对于可以点积的矩阵和向量，通过二层循环，逐元素相乘即可。第一次解题代码为：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">matrix_vector_dot_product</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> vector<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>vector<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">for</span> item <span class="token keyword">in</span> matrix<span class="token punctuation">:</span></span>
<span class="line">        temp <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">        <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>vector<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            temp <span class="token operator">+=</span> item<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">*</span> vector<span class="token punctuation">[</span>index<span class="token punctuation">]</span></span>
<span class="line">        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> result</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行通过了，但是运行时间和资源消耗的排名在 100 名开外，肯定是有可以优化的地方。我细想了一下，代码中两次用到 len(vector) 这个函数，每一次计算长度都要消耗时间，所以通过赋值的方式，优化了结构，运算时间 27ms，排行 57。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">matrix_vector_dot_product</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> vector<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    len1 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    len2 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>vector<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> len1 <span class="token operator">!=</span> len2<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">for</span> item <span class="token keyword">in</span> matrix<span class="token punctuation">:</span></span>
<span class="line">        temp <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">        <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>len2<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            temp <span class="token operator">+=</span> item<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">*</span> vector<span class="token punctuation">[</span>index<span class="token punctuation">]</span></span>
<span class="line">        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> result</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解题思路-2-转换为-numpy-处理" tabindex="-1"><a class="header-anchor" href="#解题思路-2-转换为-numpy-处理"><span>解题思路 2：转换为 Numpy 处理</span></a></h4><p>Numpy 的点积乘法是使用 <mark>@ 运算符</mark> 和 <mark>np.dot()</mark> 函数，虽然看起来写法更简单了，但是对于题目而言计算反而变得复杂了，不推荐使用，仅供学习参考。</p><p>Numpy 数组中的 shape 属性对于向量（一维数组）和矩阵（二维数组）是有区分的。矩阵中 [0] 表示有多少行，[1]表示有多少列，有多少列就说明每一行中有多少个元素。而向量只有 [0]，表示元素的数量。所以判断中才用矩阵的 [1] 和向量的 [0] 做对比。</p><p>而且最后要求以 list 形式返回结果，所以还需要 tolist() 函数进行转换，否则就是 [17 14 10] 的形式，会报错。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">matrix_vector_dot_product</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> vector<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span></span>
<span class="line">    vector <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>vector<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> matrix<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> vector<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    result <span class="token operator">=</span> matrix @ vector</span>
<span class="line">    <span class="token comment"># result = np.dot(matrix, vector)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> result<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12))])}const v=i(k,[["render",m]]),y=JSON.parse('{"path":"/blogs/CodeExam/AI/LinearAlgebra/LA1.html","title":"LA1.矩阵和向量的点积","lang":"en-US","frontmatter":{"title":"LA1.矩阵和向量的点积","date":"2025/09/19","categories":["每日一题"],"tags":["AI题库","线性代数"]},"headers":[],"git":{"createdTime":1758298327000,"updatedTime":1758386370000,"contributors":[{"name":"zjk","email":"1213860588@qq.com","commits":2}]},"filePathRelative":"blogs/CodeExam/AI/LinearAlgebra/LA1.md"}');export{v as comp,y as data};
