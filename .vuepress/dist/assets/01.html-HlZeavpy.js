import{_ as l,c as o,a as e,b as s,d as a,e as p,r as c,o as i}from"./app-DxZOFQRu.js";const u="/blog-vp-reco/matplotlib&numpy/plt-01-01.png",r="/blog-vp-reco/matplotlib&numpy/plt-01-02.png",k="/blog-vp-reco/matplotlib&numpy/plt-01-03.png",d="/blog-vp-reco/matplotlib&numpy/plt-01-04.png",m="/blog-vp-reco/matplotlib&numpy/plt-01-05.png",b="/blog-vp-reco/matplotlib&numpy/plt-01-06.png",g="/blog-vp-reco/matplotlib&numpy/plt-01-07.png",v="/blog-vp-reco/matplotlib&numpy/plt-01-08.png",x="/blog-vp-reco/matplotlib&numpy/plt-01-09.png",h="/blog-vp-reco/matplotlib&numpy/plt-01-10.png",y="/blog-vp-reco/matplotlib&numpy/plt-01-11.png",_={},f={href:"https://www.w3schools.com/colors/colors_names.asp",target:"_blank",rel:"noopener noreferrer"},q={href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.axis.html",target:"_blank",rel:"noopener noreferrer"},z={href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html",target:"_blank",rel:"noopener noreferrer"},j={href:"https://zhuanlan.zhihu.com/p/388287863",target:"_blank",rel:"noopener noreferrer"},M={href:"https://blog.csdn.net/HHG20171226/article/details/101294381",target:"_blank",rel:"noopener noreferrer"},B={href:"https://zhuanlan.zhihu.com/p/524724909",target:"_blank",rel:"noopener noreferrer"},S={href:"https://blog.csdn.net/weixin_42782150/article/details/102841192",target:"_blank",rel:"noopener noreferrer"};function T(R,n){const t=c("ExternalLinkIcon");return i(),o("div",null,[n[17]||(n[17]=e(`<h2 id="_1-折线图" tabindex="-1"><a class="header-anchor" href="#_1-折线图"><span>1. 折线图</span></a></h2><h3 id="_1-1-简单折线图-正弦余弦函数" tabindex="-1"><a class="header-anchor" href="#_1-1-简单折线图-正弦余弦函数"><span>1.1 简单折线图（正弦余弦函数）</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"></span>
<span class="line">fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 操作1：创建一个空白画布</span></span>
<span class="line">ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>axes<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 操作2：创建一个坐标轴，默认是二维坐标轴</span></span>
<span class="line"></span>
<span class="line">x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>  <span class="token comment"># 操作3：创建一个范围 0~4Π，200个均匀的值的数组</span></span>
<span class="line">ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 操作4：在坐标轴上绘制正弦函数</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 操作5：显示图像，不论怎么写这一步都不能省略</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得一提的是，在上一章节中，我们并没有写 “操作 1” 和 “操作 2” 这两个步骤，但是同样绘制出了图形，这是因为我们在执行 plt.plot() 或 ax.plot() 操作的时候，自动生成了一个画布和对应的单个坐标轴。如果不涉及对坐标轴和画布的操作，单个图表的生成可以省略前两个步骤。</p><p>如果我们需要在同一幅坐标轴中绘制多根线条，只需要多次调用 plot 函数即可：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="layout"><figure><img src="`+u+'" alt="正弦函数" width="360" tabindex="0" loading="lazy"><figcaption>正弦函数</figcaption></figure><figure><img src="'+r+`" alt="正弦余弦函数" width="360" tabindex="0" loading="lazy"><figcaption>正弦余弦函数</figcaption></figure></div><h3 id="_1-2-调整折线图-线条颜色和风格" tabindex="-1"><a class="header-anchor" href="#_1-2-调整折线图-线条颜色和风格"><span>1.2 调整折线图（线条颜色和风格）</span></a></h3><p>我们在完成上面正余弦函数的 plot 的时候一定有这样的疑惑，为什么正弦函数是蓝色的，而余弦函数是橙色的，我们并没有给它指定颜色啊。这是 Matplotlib 的内部设定，如果没有指定颜色，它会在默认颜色值中循环使用来绘制每一条线条。我们也可以给他手动更改颜色：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span>        <span class="token comment"># 通过颜色名称指定</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span>           <span class="token comment"># 通过颜色简写名称指定(rgbcmyk)</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">&#39;0.75&#39;</span><span class="token punctuation">)</span>        <span class="token comment"># 介于0-1之间的灰阶值</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">&#39;#FFDD44&#39;</span><span class="token punctuation">)</span>     <span class="token comment"># 16进制的RRGGBB值</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># RGB元组的颜色值，每个值介于0-1</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">&#39;chartreuse&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 能支持所有HTML颜色名称值</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，color 这个属性是可以简写成 c 的。常见的 <mark>颜色名称、16 进制颜色编号、RGB 元组</mark> 这些表示颜色的方法都是可以使用的。</p>`,11)),s("p",null,[n[4]||(n[4]=a("另外还有，",-1)),s("mark",null,[n[2]||(n[2]=a("0-1 的灰度值，",-1)),s("a",f,[n[0]||(n[0]=a("HTML 颜色名称值",-1)),p(t)]),n[3]||(n[3]=a("，",-1)),s("a",q,[n[1]||(n[1]=a("颜色名称简写",-1)),p(t)])]),n[5]||(n[5]=a(" 三种方式。颜色名称简写在官方文档中只有 8 个值，我直接把它贴出来：",-1))]),n[18]||(n[18]=e(`<table><thead><tr><th style="text-align:center;">character</th><th style="text-align:center;">color</th><th style="text-align:center;">character</th><th style="text-align:center;">color</th></tr></thead><tbody><tr><td style="text-align:center;">&quot;b&quot;</td><td style="text-align:center;">blue</td><td style="text-align:center;">&quot;g&quot;</td><td style="text-align:center;">green</td></tr><tr><td style="text-align:center;">&quot;r&quot;</td><td style="text-align:center;">red</td><td style="text-align:center;">&quot;c&quot;</td><td style="text-align:center;">cyan</td></tr><tr><td style="text-align:center;">&quot;m&quot;</td><td style="text-align:center;">magenta</td><td style="text-align:center;">&quot;y&quot;</td><td style="text-align:center;">yellow</td></tr><tr><td style="text-align:center;">&quot;k&quot;</td><td style="text-align:center;">black</td><td style="text-align:center;">&quot;w&quot;</td><td style="text-align:center;">white</td></tr></tbody></table><p>类似的，我们可以通过 linestyle 关键字参数指定线条风格：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 实线 == solid</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">&#39;solid&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">&#39;--&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 虚线 == dashed</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">&#39;dashed&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">&#39;-.&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 长短点虚线 == dashdot</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">&#39;dashdot&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 点线 == dotted</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">&#39;dotted&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你喜欢更简洁的代码，linestyle 和 color 这两个参数是可以合并成一个非关键词参数，传递给 plot 函数的：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;-g&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 绿色实线</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;--c&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 天青色虚线</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;-.k&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 黑色长短点虚线</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;:r&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 红色点线</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="layout"><figure><img src="`+k+'" alt="线条风格的符号/文字表示" width="360" tabindex="0" loading="lazy"><figcaption>线条风格的符号/文字表示</figcaption></figure><figure><img src="'+d+`" alt="线条风格和颜色的合成表示" width="360" tabindex="0" loading="lazy"><figcaption>线条风格和颜色的合成表示</figcaption></figure></div><h3 id="_1-3-调整坐标轴-标签和范围" tabindex="-1"><a class="header-anchor" href="#_1-3-调整坐标轴-标签和范围"><span>1.3 调整坐标轴（标签和范围）</span></a></h3><p>坐标轴的 Title 和 坐标轴名称 通过 plt.functionName() 来设置它们，而 标签（折线的名称）通过 plt.plot() 内部属性 label=&quot;&quot; 进行设置：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 图标标题、坐标轴名称</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&quot;Sin Function&quot;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">&quot;sin(x)&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 折线的标签名称，记得一定要加 legend()</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;sin(x)&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;cos(x)&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 决定标签是否在坐标轴内显示</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Matplotlib 会自动选择合适的坐标轴范围来绘制你的图像，但是有些情况下也需要自己进行相关调整。可以使用 plt.xlim() 和 plt.ylim() 函数调整坐标轴的范围。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 如果需要坐标轴反向，只需要将参数的顺序颠倒。</span></span>
<span class="line">plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.2</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关的函数还有 plt.axis()，这个函数只需要一个调用，传递一个 [xmin, xmax, ymin, ymax] 的列表参数即可。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,13)),s("p",null,[n[7]||(n[7]=a("当然了，plt.axis() 函数不仅能设置范围，还有一些其他的参数，例如：“off”、“on”、“tight”、“equal”、“sacled”、“auto”、“image”、“square”，具体请看 ",-1)),s("a",w,[n[6]||(n[6]=a("plt.axis() 函数文档",-1)),p(t)])]),n[19]||(n[19]=e(`<div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">&#39;tight&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 将坐标轴压缩到刚好足够绘制折线图的大小</span></span>
<span class="line">plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">&#39;equal&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 使 x轴和 y轴使用相同长度的单位</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还可以通过调整坐标轴的刻度，来设置范围和刻度之间的步长：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">x_ticks <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span></span>
<span class="line">y_ticks <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>x_ticks<span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span>y_ticks<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="layout"><figure><img src="`+m+'" alt="标题，名称，标签" width="360" tabindex="0" loading="lazy"><figcaption>标题，名称，标签</figcaption></figure><figure><img src="'+b+`" alt="坐标轴刻度及范围" width="360" tabindex="0" loading="lazy"><figcaption>坐标轴刻度及范围</figcaption></figure></div><h3 id="_1-4-调整坐标轴-边框和样式" tabindex="-1"><a class="header-anchor" href="#_1-4-调整坐标轴-边框和样式"><span>1.4 调整坐标轴（边框和样式）</span></a></h3><p>不知道大家有没有注意到，我们所绘制的图标都是一个四方形的方框，有的时候看着难受，我就想把正弦函数画成笛卡尔坐标的样子，不带边框行吗，坐标轴中心在（0，0）点行吗。行。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 隐藏所有的坐标轴以及边框</span></span>
<span class="line">plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">&#39;off&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 通过 ax.get_xxx() 函数隐藏 x 轴或 y 轴</span></span>
<span class="line">ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取当前坐标轴信息</span></span>
<span class="line">ax<span class="token punctuation">.</span>get_xaxis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line">ax<span class="token punctuation">.</span>get_yaxis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 通过 ax.spines[] 函数隐藏边框</span></span>
<span class="line">ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">&#39;right&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">&#39;none&#39;</span><span class="token punctuation">)</span></span>
<span class="line">ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">&#39;top&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">&#39;none&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 调整坐标轴位置基准</span></span>
<span class="line">ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_ticks_position<span class="token punctuation">(</span><span class="token string">&quot;bottom&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置 x 轴的名称</span></span>
<span class="line">ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">&quot;bottom&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">ax<span class="token punctuation">.</span>yaxis<span class="token punctuation">.</span>set_ticks_position<span class="token punctuation">(</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置 y 轴的名称</span></span>
<span class="line">ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="layout"><figure><img src="`+g+'" alt="去除边框" width="360" tabindex="0" loading="lazy"><figcaption>去除边框</figcaption></figure><figure><img src="'+v+`" alt="使坐标轴中心点位于0处" width="360" tabindex="0" loading="lazy"><figcaption>使坐标轴中心点位于0处</figcaption></figure></div><h3 id="_1-5-plt-函数向-ax-函数转换的规律" tabindex="-1"><a class="header-anchor" href="#_1-5-plt-函数向-ax-函数转换的规律"><span>1.5 plt 函数向 ax 函数转换的规律</span></a></h3><p>虽然大多数的 plt 函数都可以直接转化为 ax 的方法进行调用，例如：plt.plot() --&gt; ax.plot()，plt.legend() --&gt; ax.legend() 等等，但并不是所有的命令都能符合这样的设定。</p><p>还记得上一章说过的内容吗，ax 对象的方法，都可以通过 get_xxx 和 set_xxx 去进行获取和设置，因此 MATLAB 风格转化为面向对象方法的规律就是：</p><ul><li>plt.xlabel() --&gt; ax.set_xlabel()</li><li>plt.ylabel() --&gt; ax.set_ylabel()</li><li>plt.xlim() --&gt; ax.set_xlim()</li><li>plt.ylim() --&gt; ax.set_ylim()</li><li>plt.title() --&gt; ax.set_title()</li></ul><p>在面向对象接口中，逐个的调用方法来设置属性会比较麻烦，不优雅，更常见的是通过 ax.set() 方法来一次性的设置所有的属性：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>axes<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">ax<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>xlim<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ylim<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> xlabel<span class="token operator">=</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        ylabel<span class="token operator">=</span><span class="token string">&#39;sin(x)&#39;</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">&#39;A Simple Plot&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-散点图" tabindex="-1"><a class="header-anchor" href="#_2-散点图"><span>2. 散点图</span></a></h2><h3 id="_2-1-plot-函数绘制散点图" tabindex="-1"><a class="header-anchor" href="#_2-1-plot-函数绘制散点图"><span>2.1 plot() 函数绘制散点图</span></a></h3><p>上一节中，我们使用 plt.plot() 和 ax.plot() 来绘制了折线图，这两个方法同样可以绘制散点图。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"></span>
<span class="line">x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line">y <span class="token operator">=</span> <span class="token number">0.1</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">10</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18)),s("p",null,[n[9]||(n[9]=a("传递给函数的第三个参数是一个使用字符表示的形状去绘制具体的点，简写字符符号实在是太多了，具体的请看 ",-1)),s("a",z,[n[8]||(n[8]=a("plt.plot() 函数文档",-1)),p(t)]),n[10]||(n[10]=a("，值得注意的是，",-1)),n[11]||(n[11]=s("mark",null,[a('如果第三个参数写成了 marker="o"，那么图形将会变成 '),s("strong",null,"散点图 + 线性函数"),a("。")],-1)),n[12]||(n[12]=a(" 它相当于是写成了 plt.plot(x, y, '-og') 这个样子。",-1))]),n[20]||(n[20]=e('<div class="layout"><figure><img src="'+x+'" alt="plot()的散点图" width="360" tabindex="0" loading="lazy"><figcaption>plot()的散点图</figcaption></figure><figure><img src="'+h+`" alt="plot()的散点图加线性函数" width="360" tabindex="0" loading="lazy"><figcaption>plot()的散点图加线性函数</figcaption></figure></div><h3 id="_2-2-scatter-函数绘制散点图" tabindex="-1"><a class="header-anchor" href="#_2-2-scatter-函数绘制散点图"><span>2.2 scatter() 函数绘制散点图</span></a></h3><p>更强大的绘制散点图的方法是使用 plt.scatter() 函数，它的属性方法其实和 plot() 类似：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>它们之间的区别在于，scatter 可以针对每个点设置不同的属性（大小、填充颜色、边缘颜色等），还可以通过数据集合对这些属性进行设置。</p><p>让我们通过一个随机值数据集，绘制不同颜色和大小的散点图来说明。为了更好的查看重叠效果，我们还是用了 alpha 关键字参数对点的透明度进行了调整：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">rng <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 定义一个随机数种子</span></span>
<span class="line">x <span class="token operator">=</span> rng<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment"># 和 rand 一样，不过服从正态分布</span></span>
<span class="line">y <span class="token operator">=</span> rng<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">colors <span class="token operator">=</span> rng<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment"># 随机产生一个 [0,1) 之间的 100 个值的数组</span></span>
<span class="line">sizes <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> rng<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># cmap 是指将具体的数值映射到颜色范围中，viridis 是默认值</span></span>
<span class="line">plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> c<span class="token operator">=</span>colors<span class="token punctuation">,</span> s<span class="token operator">=</span>sizes<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">&#39;viridis&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 显示颜色对比条</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+y+'" alt="散点图晕染效果" width="560" tabindex="0" loading="lazy"><figcaption>散点图晕染效果</figcaption></figure><h3 id="_2-3-plot-和-scatter-性能对比" tabindex="-1"><a class="header-anchor" href="#_2-3-plot-和-scatter-性能对比"><span>2.3 plot 和 scatter 性能对比</span></a></h3><p>除了上面说的两个函数对于每个散点不同属性的支持不同之外，还有别的因素影响对这两个函数的选择吗？对于小的数据集来说，两者并无差异；但当数据增长到几千个点时，plot() 会明显比 scatter() 的性能要高。</p><p>造成这个差异的原因是，plt.scatter 支持每个点使用不同的大小和颜色，因此渲染每个点时需要完成更多额外的工作。而 plt.plot 来说，每个点都是简单的复制另一个点产生，因此对于整个数据集来说，确定每个点的展示属性的工作仅需要进行一次即可。</p><p>对于很大的数据集来说，这个差异会导致两者性能的巨大区别，因此，对于大数据集应该优先使用 plt.plot 函数。</p><h2 id="_3-参考文献" tabindex="-1"><a class="header-anchor" href="#_3-参考文献"><span>3. 参考文献</span></a></h2><p>部分需要当使用手册的文献已经在博文内加入了链接，此处是一些转换成我的博文内容的参考资料。</p>',14)),s("p",null,[s("a",j,[n[13]||(n[13]=a("全文 40000 字，最全(最强) Matplotlib 实操指南",-1)),p(t)])]),s("p",null,[s("a",M,[n[14]||(n[14]=a("Matplotlib：设置坐标轴范围，刻度，位置，自定义刻度名称，添加数据标签",-1)),p(t)])]),s("p",null,[s("a",B,[n[15]||(n[15]=a("matplotlib 隐藏坐标轴和边框",-1)),p(t)])]),s("p",null,[s("a",S,[n[16]||(n[16]=a("numpy.random.RandomState()函数用法详解",-1)),p(t)])])])}const A=l(_,[["render",T]]),F=JSON.parse('{"path":"/blogs/intelligence/Matplotlib/01.html","title":"常见图及属性","lang":"en-US","frontmatter":{"title":"常见图及属性","order":1,"author":"AOSAI","date":"2023-11-21T00:00:00.000Z","category":["机器学习"],"tag":["机器学习","Matplotlib"]},"headers":[{"level":2,"title":"1. 折线图","slug":"_1-折线图","link":"#_1-折线图","children":[{"level":3,"title":"1.1 简单折线图（正弦余弦函数）","slug":"_1-1-简单折线图-正弦余弦函数","link":"#_1-1-简单折线图-正弦余弦函数","children":[]},{"level":3,"title":"1.2 调整折线图（线条颜色和风格）","slug":"_1-2-调整折线图-线条颜色和风格","link":"#_1-2-调整折线图-线条颜色和风格","children":[]},{"level":3,"title":"1.3 调整坐标轴（标签和范围）","slug":"_1-3-调整坐标轴-标签和范围","link":"#_1-3-调整坐标轴-标签和范围","children":[]},{"level":3,"title":"1.4 调整坐标轴（边框和样式）","slug":"_1-4-调整坐标轴-边框和样式","link":"#_1-4-调整坐标轴-边框和样式","children":[]},{"level":3,"title":"1.5 plt 函数向 ax 函数转换的规律","slug":"_1-5-plt-函数向-ax-函数转换的规律","link":"#_1-5-plt-函数向-ax-函数转换的规律","children":[]}]},{"level":2,"title":"2. 散点图","slug":"_2-散点图","link":"#_2-散点图","children":[{"level":3,"title":"2.1 plot() 函数绘制散点图","slug":"_2-1-plot-函数绘制散点图","link":"#_2-1-plot-函数绘制散点图","children":[]},{"level":3,"title":"2.2 scatter() 函数绘制散点图","slug":"_2-2-scatter-函数绘制散点图","link":"#_2-2-scatter-函数绘制散点图","children":[]},{"level":3,"title":"2.3 plot 和 scatter 性能对比","slug":"_2-3-plot-和-scatter-性能对比","link":"#_2-3-plot-和-scatter-性能对比","children":[]}]},{"level":2,"title":"3. 参考文献","slug":"_3-参考文献","link":"#_3-参考文献","children":[]}],"git":{"createdTime":1757688790000,"updatedTime":1757688790000,"contributors":[{"name":"jinkai","email":"1213860588@qq.com","commits":1}]},"filePathRelative":"blogs/intelligence/Matplotlib/01.md"}');export{A as comp,F as data};
