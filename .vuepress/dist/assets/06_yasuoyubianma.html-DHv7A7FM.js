import{_ as s,c as a,a as t,o as p}from"./app-P8O63--9.js";const e={};function l(i,n){return p(),a("div",null,[...n[0]||(n[0]=[t(`<h2 id="_2-图像压缩" tabindex="-1"><a class="header-anchor" href="#_2-图像压缩"><span>2. 图像压缩</span></a></h2><p>仍旧记得，在我刚开始写博客的时候，因为有很多图像需要插入网页，我就想做一个编写的批量压缩图像的小软件。但是那个时候，我 OpenCV 用不明白，只能用 Pillow 进行压缩操作。所以，我来弥补遗憾了！</p><p>当然了，并不是说 OpenCV 做压缩就一定更好，它只支持 JPG、PNG、BMP、WebP 等主流格式，而 Pillow 支持更多格式，包括 TIFF、GIF、ICO 等。对比 OpenCV 和 Pillow：</p><ul><li>如果需要更高性能和复杂图像处理任务，比如物体检测或图像分割，选择 OpenCV。</li><li>如果主要是格式转换、批量处理或 Web 图片压缩，选择 Pillow 更轻便。</li></ul><p>如果是高性能需求，可以在 OpenCV 中处理图像，再使用 Pillow 保存成其他格式或更进一步优化。</p><h3 id="_2-1-imwrite-中的压缩参数" tabindex="-1"><a class="header-anchor" href="#_2-1-imwrite-中的压缩参数"><span>2.1 imwrite 中的压缩参数</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> cv2</span>
<span class="line"></span>
<span class="line">image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;img_process_0/lena.png&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">&#39;img_process_0/compressed1.jpg&#39;</span><span class="token punctuation">,</span> image<span class="token punctuation">,</span> <span class="token punctuation">[</span>cv2<span class="token punctuation">.</span>IMWRITE_JPEG_QUALITY<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">&#39;img_process_0/compressed2.png&#39;</span><span class="token punctuation">,</span> image<span class="token punctuation">,</span> <span class="token punctuation">[</span>cv2<span class="token punctuation">.</span>IMWRITE_PNG_COMPRESSION<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">&#39;img_process_0/compressed3.webp&#39;</span><span class="token punctuation">,</span> image<span class="token punctuation">,</span> <span class="token punctuation">[</span>cv2<span class="token punctuation">.</span>IMWRITE_WEBP_QUALITY<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>IMWRITE_JPEG_QUALITY</strong>：设置 JPEG 的压缩质量，范围为 0 - 100（默认值 95）。值越大，图像质量越高，压缩率越低，文件越大。值越小，图像质量下降，压缩率越高，文件越小。</p></li><li><p><strong>IMWRITE_PNG_COMPRESSION</strong>：设置 PNG 图像的压缩等级，0 - 9（默认值为 3）。值越大，压缩率越高，文件越小，但压缩速度越慢。值为 0 时不压缩，为 9 时压缩率最高但速度最慢。</p></li><li><p><strong>IMWRITE_WEBP_QUALITY</strong>：设置 WebP 图像的压缩质量，0 - 100（默认值为 75）。支持有损和无损压缩。值越大，质量越高，文件越大；值越小，质量越低，文件越小。</p></li></ul><p>OpenCV 中，压缩相关的较全的图像格式，以及压缩参数，见下表：</p><table><thead><tr><th>格式</th><th>参数名称</th><th>压缩类型</th><th>参数范围</th><th>默认值</th></tr></thead><tbody><tr><td>JPEG</td><td>cv2.IMWRITE_JPEG_QUALITY</td><td>有损压缩</td><td>0 - 100</td><td>95</td></tr><tr><td>PNG</td><td>cv2.IMWRITE_PNG_COMPRESSION</td><td>无损压缩</td><td>0 - 9</td><td>3</td></tr><tr><td>WebP</td><td>cv2.IMWRITE_WEBP_QUALITY</td><td>有损/无损</td><td>0 - 100</td><td>75</td></tr><tr><td>TIFF</td><td>cv2.IMWRITE_TIFF_COMPRESSION</td><td>无损/有损</td><td>1, 2, 3, 5</td><td>无</td></tr><tr><td>PXM</td><td>cv2.IMWRITE_PXM_BINARY</td><td>无损</td><td>0 或 1</td><td>1</td></tr><tr><td>EXR</td><td>cv2.IMWRITE_EXR_TYPE</td><td>无损压缩</td><td>0 - 5</td><td>无</td></tr><tr><td>JP2</td><td>cv2.IMWRITE_JPEG2000_COMPRESSION_X1000</td><td>有损压缩</td><td>0 - 1000</td><td>无</td></tr></tbody></table><h3 id="_2-2-使用对象保存压缩数据" tabindex="-1"><a class="header-anchor" href="#_2-2-使用对象保存压缩数据"><span>2.2 使用对象保存压缩数据</span></a></h3><p>使用对象保存压缩数据，储存到内存缓冲区，可以用 imshow 读取，也可以进行网络传输。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> cv2</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 根据实际大小自动选择合适的单位</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">format_size</span><span class="token punctuation">(</span>size_bytes<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> size_bytes <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">:</span>  <span class="token comment"># 小于 1KB</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>size_bytes<span class="token punctuation">}</span></span><span class="token string"> B&quot;</span></span></span>
<span class="line">    <span class="token keyword">elif</span> size_bytes <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">:</span>  <span class="token comment"># 小于 1MB</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>size_bytes <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string"> KB&quot;</span></span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 大于 1MB</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>size_bytes <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1024</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string"> MB&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 读取原始图像</span></span>
<span class="line">image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;img_process_0/lena.png&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 将图像压缩为 JPEG 格式并保存到内存缓冲区</span></span>
<span class="line">encode_param <span class="token operator">=</span> <span class="token punctuation">[</span>cv2<span class="token punctuation">.</span>IMWRITE_JPEG_QUALITY<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span>  <span class="token comment"># 设置压缩质量为50%</span></span>
<span class="line">result<span class="token punctuation">,</span> <span class="token builtin">buffer</span> <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imencode<span class="token punctuation">(</span><span class="token string">&#39;.jpg&#39;</span><span class="token punctuation">,</span> image<span class="token punctuation">,</span> encode_param<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 确保编码成功</span></span>
<span class="line"><span class="token keyword">if</span> result<span class="token punctuation">:</span></span>
<span class="line">    byte_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">buffer</span><span class="token punctuation">)</span>  <span class="token comment"># 获取字节大小</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Compressed size: </span><span class="token interpolation"><span class="token punctuation">{</span>format_size<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Compression failed&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 可以将 buffer 转换为字节流</span></span>
<span class="line"><span class="token comment"># 用于 网络传输、数据库存储、实时处理（比如imdecode）</span></span>
<span class="line">compressed_bytes <span class="token operator">=</span> <span class="token builtin">buffer</span><span class="token punctuation">.</span>tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 从压缩的字节数据中重新加载图像</span></span>
<span class="line">compressed_image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imdecode<span class="token punctuation">(</span>np<span class="token punctuation">.</span>frombuffer<span class="token punctuation">(</span>compressed_bytes<span class="token punctuation">,</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>IMREAD_COLOR<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 显示解码后的图像</span></span>
<span class="line">cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">&#39;Compressed Image&#39;</span><span class="token punctuation">,</span> compressed_image<span class="token punctuation">)</span></span>
<span class="line">cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（1）result, buffer = cv2.imencode(ext, img, params=None)</strong></p><ol><li>返回值 result：布尔（bool）类型，表示编码是否成功。如果成功，返回 True，否则返回 False。</li><li>返回值 buffer：numpy.ndarray 类型，表示编码后的二进制数据，存储在一个字节数组中，可以直接用于传输或写入文件。</li></ol><ul><li>参数 ext：文件扩展名（例如：.jpg, .png, .webp），确定使用哪种编码格式。</li><li>参数 img：输入的图像数据（通常为 numpy 数组类型）。</li><li>参数 params：编码参数列表，用于控制压缩质量或算法选项。</li></ul><p><strong>（2）retval = cv2.imdecode(buf, flags)</strong></p><ol><li>返回值 retval：解码后的图像，类型为 numpy.ndarray。如果解码失败，返回 None。</li></ol><ul><li>参数 buf：numpy.ndarray 或 bytes 格式数据。</li><li>参数 flags：控制解码后的图像格式和颜色空间，常用值有：</li></ul><table><thead><tr><th>Flag</th><th>用途</th><th>使用频率</th></tr></thead><tbody><tr><td>cv2.IMREAD_COLOR</td><td>彩色图像解码（默认方式，无透明度）</td><td>高</td></tr><tr><td>cv2.IMREAD_GRAYSCALE</td><td>灰度图像解码</td><td>高</td></tr><tr><td>cv2.IMREAD_UNCHANGED</td><td>保持原始图像格式，包括透明度</td><td>较高</td></tr><tr><td>cv2.IMREAD_ANYDEPTH</td><td>处理高精度位深度的图像，如 16 位或 32 位</td><td>中等</td></tr><tr><td>cv2.IMREAD_REDUCED_COLOR_2/4/8</td><td>彩色图像按比例缩小，适合大图像加载优化（1/2，1/4，1/8）</td><td>中等</td></tr><tr><td>cv2.IMREAD_REDUCED_GRAYSCALE_2/4/8</td><td>彩色图像按比例缩小，适合大图像加载优化（1/2，1/4，1/8）</td><td>中等</td></tr></tbody></table><h3 id="_2-3-压缩算法简介" tabindex="-1"><a class="header-anchor" href="#_2-3-压缩算法简介"><span>2.3 压缩算法简介</span></a></h3><p>OpenCV 中 <mark>JPEG</mark> 压缩算法的核心技术是：<mark>DCT (离散余弦变换)</mark>：</p><ol><li>将图像从空间域转换到频率域，通过抛弃高频信息（细节）来减少数据量。</li><li>量化步骤会进一步降低精度并减少存储需求。</li><li>使用熵编码（Huffman 编码）最终压缩数据。</li></ol><p>OpenCV 中 <mark>PNG</mark> 压缩算法的核心技术是：<mark>DEFLATE 算法</mark>：</p><ol><li>使用无损压缩，包括 LZ77 和哈夫曼编码的结合。</li><li>数据不会丢失，但文件大小会更大。</li></ol><p>OpenCV 中 <mark>WebP</mark> 压缩算法的核心技术是：<mark>预测编码 + 熵编码</mark>：</p><ol><li>使用预测编码来减少冗余数据，然后使用 VP8 编码进一步压缩。</li><li>支持有损和无损模式，适合现代网页和移动端应用。</li></ol>`,27)])])}const o=s(e,[["render",l]]),u=JSON.parse('{"path":"/blogs/ComputerVision/ImageProcessing/06_yasuoyubianma.html","title":"压缩与编码","lang":"en-US","frontmatter":{"title":"压缩与编码","date":"2025/09/03","categories":["计算机视觉"],"tags":["OpenCV","图像增强","图像噪声","滤波器","傅里叶变换"]},"headers":[{"level":2,"title":"2. 图像压缩","slug":"_2-图像压缩","link":"#_2-图像压缩","children":[{"level":3,"title":"2.1 imwrite 中的压缩参数","slug":"_2-1-imwrite-中的压缩参数","link":"#_2-1-imwrite-中的压缩参数","children":[]},{"level":3,"title":"2.2 使用对象保存压缩数据","slug":"_2-2-使用对象保存压缩数据","link":"#_2-2-使用对象保存压缩数据","children":[]},{"level":3,"title":"2.3 压缩算法简介","slug":"_2-3-压缩算法简介","link":"#_2-3-压缩算法简介","children":[]}]}],"git":{"createdTime":1757688790000,"updatedTime":1758386370000,"contributors":[{"name":"zjk","email":"1213860588@qq.com","commits":1}]},"filePathRelative":"blogs/ComputerVision/ImageProcessing/06_压缩与编码.md"}');export{o as comp,u as data};
